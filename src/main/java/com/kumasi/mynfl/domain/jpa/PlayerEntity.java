/*
 * Created on 5 Jun 2016 ( Time 14:55:24 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
// This Bean has a basic Primary Key (not composite) 

package com.kumasi.mynfl.domain.jpa;

import java.io.Serializable;

//import javax.validation.constraints.* ;
//import org.hibernate.validator.constraints.* ;

import java.util.Date;
import java.util.List;

import javax.persistence.*;

/**
 * Persistent class for entity stored in table "Player"
 *
 * @author Telosys Tools Generator
 *
 */

@Entity
@Table(name="Player", catalog="nfldb" )
// Define named queries here
@NamedQueries ( {
  @NamedQuery ( name="PlayerEntity.countAll", query="SELECT COUNT(x) FROM PlayerEntity x" )
} )
public class PlayerEntity implements Serializable {

    private static final long serialVersionUID = 1L;

    //----------------------------------------------------------------------
    // ENTITY PRIMARY KEY ( BASED ON A SINGLE FIELD )
    //----------------------------------------------------------------------
    @Id
    @Column(name="id", nullable=false)
    private Integer    id           ;


    //----------------------------------------------------------------------
    // ENTITY DATA FIELDS 
    //----------------------------------------------------------------------    
    @Column(name="first_name", length=45)
    private String     firstName    ;

    @Column(name="last_name", length=45)
    private String     lastName     ;

    @Temporal(TemporalType.DATE)
    @Column(name="date_of_birth")
    private Date       dateOfBirth  ;

    @Column(name="college", length=45)
    private String     college      ;

    @Column(name="draft_position", length=45)
    private String     draftPosition ;

    @Column(name="year_selected")
    private Integer    yearSelected ;

    @Temporal(TemporalType.DATE)
    @Column(name="date_signed")
    private Date       dateSigned   ;

	// "playerPositionId" (column "Player_Position_id") is not defined by itself because used as FK in a link 
	// "teamId" (column "Team_id") is not defined by itself because used as FK in a link 


    //----------------------------------------------------------------------
    // ENTITY LINKS ( RELATIONSHIP )
    //----------------------------------------------------------------------
    @OneToMany(mappedBy="player", targetEntity=PlayerStatEntity.class)
    private List<PlayerStatEntity> listOfPlayerStat;

    @ManyToOne
    @JoinColumn(name="Player_Position_id", referencedColumnName="id")
    private PlayerPositionEntity playerPosition;

    @ManyToOne
    @JoinColumn(name="Team_id", referencedColumnName="id")
    private TeamEntity team        ;

    @OneToMany(mappedBy="player", targetEntity=PlayerStatusEntity.class)
    private List<PlayerStatusEntity> listOfPlayerStatus;


    //----------------------------------------------------------------------
    // CONSTRUCTOR(S)
    //----------------------------------------------------------------------
    public PlayerEntity() {
		super();
    }
    
    //----------------------------------------------------------------------
    // GETTER & SETTER FOR THE KEY FIELD
    //----------------------------------------------------------------------
    public void setId( Integer id ) {
        this.id = id ;
    }
    public Integer getId() {
        return this.id;
    }

    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR FIELDS
    //----------------------------------------------------------------------
    //--- DATABASE MAPPING : first_name ( VARCHAR ) 
    public void setFirstName( String firstName ) {
        this.firstName = firstName;
    }
    public String getFirstName() {
        return this.firstName;
    }

    //--- DATABASE MAPPING : last_name ( VARCHAR ) 
    public void setLastName( String lastName ) {
        this.lastName = lastName;
    }
    public String getLastName() {
        return this.lastName;
    }

    //--- DATABASE MAPPING : date_of_birth ( DATE ) 
    public void setDateOfBirth( Date dateOfBirth ) {
        this.dateOfBirth = dateOfBirth;
    }
    public Date getDateOfBirth() {
        return this.dateOfBirth;
    }

    //--- DATABASE MAPPING : college ( VARCHAR ) 
    public void setCollege( String college ) {
        this.college = college;
    }
    public String getCollege() {
        return this.college;
    }

    //--- DATABASE MAPPING : draft_position ( VARCHAR ) 
    public void setDraftPosition( String draftPosition ) {
        this.draftPosition = draftPosition;
    }
    public String getDraftPosition() {
        return this.draftPosition;
    }

    //--- DATABASE MAPPING : year_selected ( INT ) 
    public void setYearSelected( Integer yearSelected ) {
        this.yearSelected = yearSelected;
    }
    public Integer getYearSelected() {
        return this.yearSelected;
    }

    //--- DATABASE MAPPING : date_signed ( DATE ) 
    public void setDateSigned( Date dateSigned ) {
        this.dateSigned = dateSigned;
    }
    public Date getDateSigned() {
        return this.dateSigned;
    }


    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR LINKS
    //----------------------------------------------------------------------
    public void setListOfPlayerStat( List<PlayerStatEntity> listOfPlayerStat ) {
        this.listOfPlayerStat = listOfPlayerStat;
    }
    public List<PlayerStatEntity> getListOfPlayerStat() {
        return this.listOfPlayerStat;
    }

    public void setPlayerPosition( PlayerPositionEntity playerPosition ) {
        this.playerPosition = playerPosition;
    }
    public PlayerPositionEntity getPlayerPosition() {
        return this.playerPosition;
    }

    public void setTeam( TeamEntity team ) {
        this.team = team;
    }
    public TeamEntity getTeam() {
        return this.team;
    }

    public void setListOfPlayerStatus( List<PlayerStatusEntity> listOfPlayerStatus ) {
        this.listOfPlayerStatus = listOfPlayerStatus;
    }
    public List<PlayerStatusEntity> getListOfPlayerStatus() {
        return this.listOfPlayerStatus;
    }


    //----------------------------------------------------------------------
    // toString METHOD
    //----------------------------------------------------------------------
    public String toString() { 
        StringBuffer sb = new StringBuffer(); 
       
        sb.append(firstName);
        sb.append(" ");
        sb.append(lastName);
        
        return sb.toString(); 
    } 

}
