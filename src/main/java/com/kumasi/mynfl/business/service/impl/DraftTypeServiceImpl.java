/*
 * Created on 5 Jun 2016 ( Time 14:55:36 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.kumasi.mynfl.business.service.impl;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import com.kumasi.mynfl.domain.DraftType;
import com.kumasi.mynfl.domain.jpa.DraftTypeEntity;
import java.util.List;
import com.kumasi.mynfl.business.service.DraftTypeService;
import com.kumasi.mynfl.business.service.mapping.DraftTypeServiceMapper;
import com.kumasi.mynfl.persistence.PersistenceServiceProvider;
import com.kumasi.mynfl.persistence.services.DraftTypePersistence;
import org.springframework.stereotype.Component;

/**
 * Implementation of DraftTypeService
 */
@Component
public class DraftTypeServiceImpl implements DraftTypeService {

	private DraftTypePersistence draftTypePersistence;

	@Resource
	private DraftTypeServiceMapper draftTypeServiceMapper;
	
	public DraftTypeServiceImpl() {
		draftTypePersistence = PersistenceServiceProvider.getService(DraftTypePersistence.class);
	}
		
	@Override
	public DraftType findById(Integer id) {
		DraftTypeEntity entity = draftTypePersistence.load(id);
		return draftTypeServiceMapper.mapDraftTypeEntityToDraftType(entity);
	}

	@Override
	public List<DraftType> findAll() {
		List<DraftTypeEntity> entities = draftTypePersistence.loadAll();
		List<DraftType> beans = new ArrayList<DraftType>();
		for(DraftTypeEntity entity : entities) {
			beans.add(draftTypeServiceMapper.mapDraftTypeEntityToDraftType(entity));
		}
		return beans;
	}

	@Override
	public DraftType save(DraftType draftType) {
		return update(draftType) ;
	}

	@Override
	public DraftType create(DraftType draftType) {
		if(draftTypePersistence.load(draftType.getId()) != null) {
			throw new IllegalStateException("already.exists");
		}
		DraftTypeEntity draftTypeEntity = new DraftTypeEntity();
		draftTypeServiceMapper.mapDraftTypeToDraftTypeEntity(draftType, draftTypeEntity);
		DraftTypeEntity draftTypeEntitySaved = draftTypePersistence.save(draftTypeEntity);
		return draftTypeServiceMapper.mapDraftTypeEntityToDraftType(draftTypeEntitySaved);
	}

	@Override
	public DraftType update(DraftType draftType) {
		DraftTypeEntity draftTypeEntity = draftTypePersistence.load(draftType.getId());
		draftTypeServiceMapper.mapDraftTypeToDraftTypeEntity(draftType, draftTypeEntity);
		DraftTypeEntity draftTypeEntitySaved = draftTypePersistence.save(draftTypeEntity);
		return draftTypeServiceMapper.mapDraftTypeEntityToDraftType(draftTypeEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		draftTypePersistence.delete(id);
	}

	public DraftTypePersistence getDraftTypePersistence() {
		return draftTypePersistence;
	}

	public void setDraftTypePersistence(DraftTypePersistence draftTypePersistence) {
		this.draftTypePersistence = draftTypePersistence;
	}

	public DraftTypeServiceMapper getDraftTypeServiceMapper() {
		return draftTypeServiceMapper;
	}

	public void setDraftTypeServiceMapper(DraftTypeServiceMapper draftTypeServiceMapper) {
		this.draftTypeServiceMapper = draftTypeServiceMapper;
	}

}
