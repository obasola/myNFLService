/*
 * Created on 5 Jun 2016 ( Time 14:55:36 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.kumasi.mynfl.business.service.impl;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import com.kumasi.mynfl.domain.PlayerPosition;
import com.kumasi.mynfl.domain.jpa.PlayerPositionEntity;
import java.util.List;
import com.kumasi.mynfl.business.service.PlayerPositionService;
import com.kumasi.mynfl.business.service.mapping.PlayerPositionServiceMapper;
import com.kumasi.mynfl.persistence.PersistenceServiceProvider;
import com.kumasi.mynfl.persistence.services.PlayerPositionPersistence;
import org.springframework.stereotype.Component;

/**
 * Implementation of PlayerPositionService
 */
@Component
public class PlayerPositionServiceImpl implements PlayerPositionService {

	private PlayerPositionPersistence playerPositionPersistence;

	@Resource
	private PlayerPositionServiceMapper playerPositionServiceMapper;
	
	public PlayerPositionServiceImpl() {
		playerPositionPersistence = PersistenceServiceProvider.getService(PlayerPositionPersistence.class);
	}
		
	@Override
	public PlayerPosition findById(Integer id) {
		PlayerPositionEntity entity = playerPositionPersistence.load(id);
		return playerPositionServiceMapper.mapPlayerPositionEntityToPlayerPosition(entity);
	}

	@Override
	public List<PlayerPosition> findAll() {
		List<PlayerPositionEntity> entities = playerPositionPersistence.loadAll();
		List<PlayerPosition> beans = new ArrayList<PlayerPosition>();
		for(PlayerPositionEntity entity : entities) {
			beans.add(playerPositionServiceMapper.mapPlayerPositionEntityToPlayerPosition(entity));
		}
		return beans;
	}

	@Override
	public PlayerPosition save(PlayerPosition playerPosition) {
		return update(playerPosition) ;
	}

	@Override
	public PlayerPosition create(PlayerPosition playerPosition) {
		if(playerPositionPersistence.load(playerPosition.getId()) != null) {
			throw new IllegalStateException("already.exists");
		}
		PlayerPositionEntity playerPositionEntity = new PlayerPositionEntity();
		playerPositionServiceMapper.mapPlayerPositionToPlayerPositionEntity(playerPosition, playerPositionEntity);
		PlayerPositionEntity playerPositionEntitySaved = playerPositionPersistence.save(playerPositionEntity);
		return playerPositionServiceMapper.mapPlayerPositionEntityToPlayerPosition(playerPositionEntitySaved);
	}

	@Override
	public PlayerPosition update(PlayerPosition playerPosition) {
		PlayerPositionEntity playerPositionEntity = playerPositionPersistence.load(playerPosition.getId());
		playerPositionServiceMapper.mapPlayerPositionToPlayerPositionEntity(playerPosition, playerPositionEntity);
		PlayerPositionEntity playerPositionEntitySaved = playerPositionPersistence.save(playerPositionEntity);
		return playerPositionServiceMapper.mapPlayerPositionEntityToPlayerPosition(playerPositionEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		playerPositionPersistence.delete(id);
	}

	public PlayerPositionPersistence getPlayerPositionPersistence() {
		return playerPositionPersistence;
	}

	public void setPlayerPositionPersistence(PlayerPositionPersistence playerPositionPersistence) {
		this.playerPositionPersistence = playerPositionPersistence;
	}

	public PlayerPositionServiceMapper getPlayerPositionServiceMapper() {
		return playerPositionServiceMapper;
	}

	public void setPlayerPositionServiceMapper(PlayerPositionServiceMapper playerPositionServiceMapper) {
		this.playerPositionServiceMapper = playerPositionServiceMapper;
	}

}
