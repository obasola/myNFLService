/*
 * Created on 5 Jun 2016 ( Time 14:55:37 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.kumasi.mynfl.business.service.impl;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import com.kumasi.mynfl.domain.TeamStat;
import com.kumasi.mynfl.domain.jpa.TeamStatEntity;
import com.kumasi.mynfl.business.service.TeamStatService;
import com.kumasi.mynfl.business.service.mapping.TeamStatServiceMapper;
import com.kumasi.mynfl.persistence.PersistenceServiceProvider;
import com.kumasi.mynfl.persistence.services.TeamStatPersistence;
import org.springframework.stereotype.Component;

/**
 * Implementation of TeamStatService
 */
@Component
public class TeamStatServiceImpl implements TeamStatService {

	private TeamStatPersistence teamStatPersistence;

	@Resource
	private TeamStatServiceMapper teamStatServiceMapper;
	
	public TeamStatServiceImpl() {
		teamStatPersistence = PersistenceServiceProvider.getService(TeamStatPersistence.class);
	}
		
	@Override
	public TeamStat findById(Integer id) {
		TeamStatEntity entity = teamStatPersistence.load(id);
		return teamStatServiceMapper.mapTeamStatEntityToTeamStat(entity);
	}

	@Override
	public List<TeamStat> findAll() {
		List<TeamStatEntity> entities = teamStatPersistence.loadAll();
		List<TeamStat> beans = new ArrayList<TeamStat>();
		for(TeamStatEntity entity : entities) {
			beans.add(teamStatServiceMapper.mapTeamStatEntityToTeamStat(entity));
		}
		return beans;
	}

	@Override
	public TeamStat save(TeamStat teamStat) {
		return update(teamStat) ;
	}

	@Override
	public TeamStat create(TeamStat teamStat) {
		if(teamStatPersistence.load(teamStat.getId()) != null) {
			throw new IllegalStateException("already.exists");
		}
		TeamStatEntity teamStatEntity = new TeamStatEntity();
		teamStatServiceMapper.mapTeamStatToTeamStatEntity(teamStat, teamStatEntity);
		TeamStatEntity teamStatEntitySaved = teamStatPersistence.save(teamStatEntity);
		return teamStatServiceMapper.mapTeamStatEntityToTeamStat(teamStatEntitySaved);
	}

	@Override
	public TeamStat update(TeamStat teamStat) {
		TeamStatEntity teamStatEntity = teamStatPersistence.load(teamStat.getId());
		teamStatServiceMapper.mapTeamStatToTeamStatEntity(teamStat, teamStatEntity);
		TeamStatEntity teamStatEntitySaved = teamStatPersistence.save(teamStatEntity);
		return teamStatServiceMapper.mapTeamStatEntityToTeamStat(teamStatEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		teamStatPersistence.delete(id);
	}

	public TeamStatPersistence getTeamStatPersistence() {
		return teamStatPersistence;
	}

	public void setTeamStatPersistence(TeamStatPersistence teamStatPersistence) {
		this.teamStatPersistence = teamStatPersistence;
	}

	public TeamStatServiceMapper getTeamStatServiceMapper() {
		return teamStatServiceMapper;
	}

	public void setTeamStatServiceMapper(TeamStatServiceMapper teamStatServiceMapper) {
		this.teamStatServiceMapper = teamStatServiceMapper;
	}

}
