/*
 * Created on 5 Jun 2016 ( Time 14:55:36 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.kumasi.mynfl.business.service.impl;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import com.kumasi.mynfl.domain.Player;
import com.kumasi.mynfl.domain.jpa.PlayerEntity;
import java.util.Date;
import java.util.List;
import com.kumasi.mynfl.business.service.PlayerService;
import com.kumasi.mynfl.business.service.mapping.PlayerServiceMapper;
import com.kumasi.mynfl.persistence.PersistenceServiceProvider;
import com.kumasi.mynfl.persistence.services.PlayerPersistence;
import org.springframework.stereotype.Component;

/**
 * Implementation of PlayerService
 */
@Component
public class PlayerServiceImpl implements PlayerService {

	private PlayerPersistence playerPersistence;

	@Resource
	private PlayerServiceMapper playerServiceMapper;
	
	public PlayerServiceImpl() {
		playerPersistence = PersistenceServiceProvider.getService(PlayerPersistence.class);
	}
		
	@Override
	public Player findById(Integer id) {
		PlayerEntity entity = playerPersistence.load(id);
		return playerServiceMapper.mapPlayerEntityToPlayer(entity);
	}

	@Override
	public List<Player> findAll() {
		List<PlayerEntity> entities = playerPersistence.loadAll();
		List<Player> beans = new ArrayList<Player>();
		for(PlayerEntity entity : entities) {
			beans.add(playerServiceMapper.mapPlayerEntityToPlayer(entity));
		}
		return beans;
	}

	@Override
	public Player save(Player player) {
		return update(player) ;
	}

	@Override
	public Player create(Player player) {
		if(playerPersistence.load(player.getId()) != null) {
			throw new IllegalStateException("already.exists");
		}
		PlayerEntity playerEntity = new PlayerEntity();
		playerServiceMapper.mapPlayerToPlayerEntity(player, playerEntity);
		PlayerEntity playerEntitySaved = playerPersistence.save(playerEntity);
		return playerServiceMapper.mapPlayerEntityToPlayer(playerEntitySaved);
	}

	@Override
	public Player update(Player player) {
		PlayerEntity playerEntity = playerPersistence.load(player.getId());
		playerServiceMapper.mapPlayerToPlayerEntity(player, playerEntity);
		PlayerEntity playerEntitySaved = playerPersistence.save(playerEntity);
		return playerServiceMapper.mapPlayerEntityToPlayer(playerEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		playerPersistence.delete(id);
	}

	public PlayerPersistence getPlayerPersistence() {
		return playerPersistence;
	}

	public void setPlayerPersistence(PlayerPersistence playerPersistence) {
		this.playerPersistence = playerPersistence;
	}

	public PlayerServiceMapper getPlayerServiceMapper() {
		return playerServiceMapper;
	}

	public void setPlayerServiceMapper(PlayerServiceMapper playerServiceMapper) {
		this.playerServiceMapper = playerServiceMapper;
	}

}
