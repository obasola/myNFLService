/*
 * Created on 5 Jun 2016 ( Time 14:55:36 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.kumasi.mynfl.business.service.impl;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import com.kumasi.mynfl.domain.DraftTeam;
import com.kumasi.mynfl.domain.jpa.DraftTeamEntity;
import java.util.List;
import com.kumasi.mynfl.business.service.DraftTeamService;
import com.kumasi.mynfl.business.service.mapping.DraftTeamServiceMapper;
import com.kumasi.mynfl.persistence.PersistenceServiceProvider;
import com.kumasi.mynfl.persistence.services.DraftTeamPersistence;
import org.springframework.stereotype.Component;

/**
 * Implementation of DraftTeamService
 */
@Component
public class DraftTeamServiceImpl implements DraftTeamService {

	private DraftTeamPersistence draftTeamPersistence;

	@Resource
	private DraftTeamServiceMapper draftTeamServiceMapper;
	
	public DraftTeamServiceImpl() {
		draftTeamPersistence = PersistenceServiceProvider.getService(DraftTeamPersistence.class);
	}
		
	@Override
	public DraftTeam findById(Integer id) {
		DraftTeamEntity entity = draftTeamPersistence.load(id);
		return draftTeamServiceMapper.mapDraftTeamEntityToDraftTeam(entity);
	}

	@Override
	public List<DraftTeam> findAll() {
		List<DraftTeamEntity> entities = draftTeamPersistence.loadAll();
		List<DraftTeam> beans = new ArrayList<DraftTeam>();
		for(DraftTeamEntity entity : entities) {
			beans.add(draftTeamServiceMapper.mapDraftTeamEntityToDraftTeam(entity));
		}
		return beans;
	}

	@Override
	public DraftTeam save(DraftTeam draftTeam) {
		return update(draftTeam) ;
	}

	@Override
	public DraftTeam create(DraftTeam draftTeam) {
		if(draftTeamPersistence.load(draftTeam.getId()) != null) {
			throw new IllegalStateException("already.exists");
		}
		DraftTeamEntity draftTeamEntity = new DraftTeamEntity();
		draftTeamServiceMapper.mapDraftTeamToDraftTeamEntity(draftTeam, draftTeamEntity);
		DraftTeamEntity draftTeamEntitySaved = draftTeamPersistence.save(draftTeamEntity);
		return draftTeamServiceMapper.mapDraftTeamEntityToDraftTeam(draftTeamEntitySaved);
	}

	@Override
	public DraftTeam update(DraftTeam draftTeam) {
		DraftTeamEntity draftTeamEntity = draftTeamPersistence.load(draftTeam.getId());
		draftTeamServiceMapper.mapDraftTeamToDraftTeamEntity(draftTeam, draftTeamEntity);
		DraftTeamEntity draftTeamEntitySaved = draftTeamPersistence.save(draftTeamEntity);
		return draftTeamServiceMapper.mapDraftTeamEntityToDraftTeam(draftTeamEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		draftTeamPersistence.delete(id);
	}

	public DraftTeamPersistence getDraftTeamPersistence() {
		return draftTeamPersistence;
	}

	public void setDraftTeamPersistence(DraftTeamPersistence draftTeamPersistence) {
		this.draftTeamPersistence = draftTeamPersistence;
	}

	public DraftTeamServiceMapper getDraftTeamServiceMapper() {
		return draftTeamServiceMapper;
	}

	public void setDraftTeamServiceMapper(DraftTeamServiceMapper draftTeamServiceMapper) {
		this.draftTeamServiceMapper = draftTeamServiceMapper;
	}

}
