/*
 * Created on 5 Jun 2016 ( Time 14:55:36 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.kumasi.mynfl.business.service.impl;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import com.kumasi.mynfl.domain.DraftRound;
import com.kumasi.mynfl.domain.jpa.DraftRoundEntity;
import com.kumasi.mynfl.business.service.DraftRoundService;
import com.kumasi.mynfl.business.service.mapping.DraftRoundServiceMapper;
import com.kumasi.mynfl.persistence.PersistenceServiceProvider;
import com.kumasi.mynfl.persistence.services.DraftRoundPersistence;
import org.springframework.stereotype.Component;

/**
 * Implementation of DraftRoundService
 */
@Component
public class DraftRoundServiceImpl implements DraftRoundService {

	private DraftRoundPersistence draftRoundPersistence;

	@Resource
	private DraftRoundServiceMapper draftRoundServiceMapper;
	
	public DraftRoundServiceImpl() {
		draftRoundPersistence = PersistenceServiceProvider.getService(DraftRoundPersistence.class);
	}
		
	@Override
	public DraftRound findById(Integer id) {
		DraftRoundEntity entity = draftRoundPersistence.load(id);
		return draftRoundServiceMapper.mapDraftRoundEntityToDraftRound(entity);
	}

	@Override
	public List<DraftRound> findAll() {
		List<DraftRoundEntity> entities = draftRoundPersistence.loadAll();
		List<DraftRound> beans = new ArrayList<DraftRound>();
		for(DraftRoundEntity entity : entities) {
			beans.add(draftRoundServiceMapper.mapDraftRoundEntityToDraftRound(entity));
		}
		return beans;
	}

	@Override
	public DraftRound save(DraftRound draftRound) {
		return update(draftRound) ;
	}

	@Override
	public DraftRound create(DraftRound draftRound) {
		if(draftRoundPersistence.load(draftRound.getId()) != null) {
			throw new IllegalStateException("already.exists");
		}
		DraftRoundEntity draftRoundEntity = new DraftRoundEntity();
		draftRoundServiceMapper.mapDraftRoundToDraftRoundEntity(draftRound, draftRoundEntity);
		DraftRoundEntity draftRoundEntitySaved = draftRoundPersistence.save(draftRoundEntity);
		return draftRoundServiceMapper.mapDraftRoundEntityToDraftRound(draftRoundEntitySaved);
	}

	@Override
	public DraftRound update(DraftRound draftRound) {
		DraftRoundEntity draftRoundEntity = draftRoundPersistence.load(draftRound.getId());
		draftRoundServiceMapper.mapDraftRoundToDraftRoundEntity(draftRound, draftRoundEntity);
		DraftRoundEntity draftRoundEntitySaved = draftRoundPersistence.save(draftRoundEntity);
		return draftRoundServiceMapper.mapDraftRoundEntityToDraftRound(draftRoundEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		draftRoundPersistence.delete(id);
	}

	public DraftRoundPersistence getDraftRoundPersistence() {
		return draftRoundPersistence;
	}

	public void setDraftRoundPersistence(DraftRoundPersistence draftRoundPersistence) {
		this.draftRoundPersistence = draftRoundPersistence;
	}

	public DraftRoundServiceMapper getDraftRoundServiceMapper() {
		return draftRoundServiceMapper;
	}

	public void setDraftRoundServiceMapper(DraftRoundServiceMapper draftRoundServiceMapper) {
		this.draftRoundServiceMapper = draftRoundServiceMapper;
	}

}
