/*
 * Created on 5 Jun 2016 ( Time 14:55:37 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.kumasi.mynfl.business.service.impl;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import com.kumasi.mynfl.domain.PlayerStatus;
import com.kumasi.mynfl.domain.jpa.PlayerStatusEntity;
import com.kumasi.mynfl.domain.jpa.PlayerStatusEntityKey;
import com.kumasi.mynfl.business.service.PlayerStatusService;
import com.kumasi.mynfl.business.service.mapping.PlayerStatusServiceMapper;
import com.kumasi.mynfl.persistence.PersistenceServiceProvider;
import com.kumasi.mynfl.persistence.services.PlayerStatusPersistence;
import org.springframework.stereotype.Component;

/**
 * Implementation of PlayerStatusService
 */
@Component
public class PlayerStatusServiceImpl implements PlayerStatusService {

	private PlayerStatusPersistence playerStatusPersistence;

	@Resource
	private PlayerStatusServiceMapper playerStatusServiceMapper;
	
	public PlayerStatusServiceImpl() {
		playerStatusPersistence = PersistenceServiceProvider.getService(PlayerStatusPersistence.class);
	}
		
	@Override
	public PlayerStatus findById(Integer id, Integer statusId) {
		PlayerStatusEntity entity = playerStatusPersistence.load(id, statusId);
		return playerStatusServiceMapper.mapPlayerStatusEntityToPlayerStatus(entity);
	}

	@Override
	public List<PlayerStatus> findAll() {
		List<PlayerStatusEntity> entities = playerStatusPersistence.loadAll();
		List<PlayerStatus> beans = new ArrayList<PlayerStatus>();
		for(PlayerStatusEntity entity : entities) {
			beans.add(playerStatusServiceMapper.mapPlayerStatusEntityToPlayerStatus(entity));
		}
		return beans;
	}

	@Override
	public PlayerStatus save(PlayerStatus playerStatus) {
		return update(playerStatus) ;
	}

	@Override
	public PlayerStatus create(PlayerStatus playerStatus) {
		if(playerStatusPersistence.load(playerStatus.getId(), playerStatus.getStatusId()) != null) {
			throw new IllegalStateException("already.exists");
		}
		PlayerStatusEntity playerStatusEntity = new PlayerStatusEntity();
		playerStatusServiceMapper.mapPlayerStatusToPlayerStatusEntity(playerStatus, playerStatusEntity);
		PlayerStatusEntity playerStatusEntitySaved = playerStatusPersistence.save(playerStatusEntity);
		return playerStatusServiceMapper.mapPlayerStatusEntityToPlayerStatus(playerStatusEntitySaved);
	}

	@Override
	public PlayerStatus update(PlayerStatus playerStatus) {
		PlayerStatusEntity playerStatusEntity = playerStatusPersistence.load(playerStatus.getId(), playerStatus.getStatusId());
		playerStatusServiceMapper.mapPlayerStatusToPlayerStatusEntity(playerStatus, playerStatusEntity);
		PlayerStatusEntity playerStatusEntitySaved = playerStatusPersistence.save(playerStatusEntity);
		return playerStatusServiceMapper.mapPlayerStatusEntityToPlayerStatus(playerStatusEntitySaved);
	}

	@Override
	public void delete(Integer id, Integer statusId) {
		playerStatusPersistence.delete(id, statusId);
	}

	public PlayerStatusPersistence getPlayerStatusPersistence() {
		return playerStatusPersistence;
	}

	public void setPlayerStatusPersistence(PlayerStatusPersistence playerStatusPersistence) {
		this.playerStatusPersistence = playerStatusPersistence;
	}

	public PlayerStatusServiceMapper getPlayerStatusServiceMapper() {
		return playerStatusServiceMapper;
	}

	public void setPlayerStatusServiceMapper(PlayerStatusServiceMapper playerStatusServiceMapper) {
		this.playerStatusServiceMapper = playerStatusServiceMapper;
	}

}
