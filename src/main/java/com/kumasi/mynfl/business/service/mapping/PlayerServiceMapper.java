/*
 * Created on 5 Jun 2016 ( Time 14:55:36 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.kumasi.mynfl.business.service.mapping;

import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.stereotype.Component;
import com.kumasi.mynfl.domain.Player;
import com.kumasi.mynfl.domain.jpa.PlayerEntity;
import com.kumasi.mynfl.domain.jpa.PlayerPositionEntity;
import com.kumasi.mynfl.domain.jpa.TeamEntity;

/**
 * Mapping between entity beans and display beans.
 */
@Component
public class PlayerServiceMapper extends AbstractServiceMapper {

	/**
	 * ModelMapper : bean to bean mapping library.
	 */
	private ModelMapper modelMapper;
	
	/**
	 * Constructor.
	 */
	public PlayerServiceMapper() {
		modelMapper = new ModelMapper();
		modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
	}

	/**
	 * Mapping from 'PlayerEntity' to 'Player'
	 * @param playerEntity
	 */
	public Player mapPlayerEntityToPlayer(PlayerEntity playerEntity) {
		if(playerEntity == null) {
			return null;
		}

		//--- Generic mapping 
		Player player = map(playerEntity, Player.class);

		//--- Link mapping ( link to PlayerPosition )
		if(playerEntity.getPlayerPosition() != null) {
			player.setPlayerPositionId(playerEntity.getPlayerPosition().getId());
		}
		//--- Link mapping ( link to Team )
		if(playerEntity.getTeam() != null) {
			player.setTeamId(playerEntity.getTeam().getId());
		}
		return player;
	}
	
	/**
	 * Mapping from 'Player' to 'PlayerEntity'
	 * @param player
	 * @param playerEntity
	 */
	public void mapPlayerToPlayerEntity(Player player, PlayerEntity playerEntity) {
		if(player == null) {
			return;
		}

		//--- Generic mapping 
		map(player, playerEntity);

		//--- Link mapping ( link : player )
		if( hasLinkToPlayerPosition(player) ) {
			PlayerPositionEntity playerPosition1 = new PlayerPositionEntity();
			playerPosition1.setId( player.getPlayerPositionId() );
			playerEntity.setPlayerPosition( playerPosition1 );
		} else {
			playerEntity.setPlayerPosition( null );
		}

		//--- Link mapping ( link : player )
		if( hasLinkToTeam(player) ) {
			TeamEntity team2 = new TeamEntity();
			team2.setId( player.getTeamId() );
			playerEntity.setTeam( team2 );
		} else {
			playerEntity.setTeam( null );
		}

	}
	
	/**
	 * Verify that PlayerPosition id is valid.
	 * @param PlayerPosition PlayerPosition
	 * @return boolean
	 */
	private boolean hasLinkToPlayerPosition(Player player) {
		if(player.getPlayerPositionId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * Verify that Team id is valid.
	 * @param Team Team
	 * @return boolean
	 */
	private boolean hasLinkToTeam(Player player) {
		if(player.getTeamId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	protected ModelMapper getModelMapper() {
		return modelMapper;
	}

	protected void setModelMapper(ModelMapper modelMapper) {
		this.modelMapper = modelMapper;
	}

}