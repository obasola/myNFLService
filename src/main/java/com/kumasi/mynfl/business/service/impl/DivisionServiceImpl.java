/*
 * Created on 5 Jun 2016 ( Time 14:55:36 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.kumasi.mynfl.business.service.impl;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import com.kumasi.mynfl.domain.Division;
import com.kumasi.mynfl.domain.jpa.DivisionEntity;
import java.util.List;
import com.kumasi.mynfl.business.service.DivisionService;
import com.kumasi.mynfl.business.service.mapping.DivisionServiceMapper;
import com.kumasi.mynfl.persistence.PersistenceServiceProvider;
import com.kumasi.mynfl.persistence.services.DivisionPersistence;
import org.springframework.stereotype.Component;

/**
 * Implementation of DivisionService
 */
@Component
public class DivisionServiceImpl implements DivisionService {

	private DivisionPersistence divisionPersistence;

	@Resource
	private DivisionServiceMapper divisionServiceMapper;
	
	public DivisionServiceImpl() {
		divisionPersistence = PersistenceServiceProvider.getService(DivisionPersistence.class);
	}
		
	@Override
	public Division findById(Integer id) {
		DivisionEntity entity = divisionPersistence.load(id);
		return divisionServiceMapper.mapDivisionEntityToDivision(entity);
	}

	@Override
	public List<Division> findAll() {
		List<DivisionEntity> entities = divisionPersistence.loadAll();
		List<Division> beans = new ArrayList<Division>();
		for(DivisionEntity entity : entities) {
			beans.add(divisionServiceMapper.mapDivisionEntityToDivision(entity));
		}
		return beans;
	}

	@Override
	public Division save(Division division) {
		return update(division) ;
	}

	@Override
	public Division create(Division division) {
		if(divisionPersistence.load(division.getId()) != null) {
			throw new IllegalStateException("already.exists");
		}
		DivisionEntity divisionEntity = new DivisionEntity();
		divisionServiceMapper.mapDivisionToDivisionEntity(division, divisionEntity);
		DivisionEntity divisionEntitySaved = divisionPersistence.save(divisionEntity);
		return divisionServiceMapper.mapDivisionEntityToDivision(divisionEntitySaved);
	}

	@Override
	public Division update(Division division) {
		DivisionEntity divisionEntity = divisionPersistence.load(division.getId());
		divisionServiceMapper.mapDivisionToDivisionEntity(division, divisionEntity);
		DivisionEntity divisionEntitySaved = divisionPersistence.save(divisionEntity);
		return divisionServiceMapper.mapDivisionEntityToDivision(divisionEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		divisionPersistence.delete(id);
	}

	public DivisionPersistence getDivisionPersistence() {
		return divisionPersistence;
	}

	public void setDivisionPersistence(DivisionPersistence divisionPersistence) {
		this.divisionPersistence = divisionPersistence;
	}

	public DivisionServiceMapper getDivisionServiceMapper() {
		return divisionServiceMapper;
	}

	public void setDivisionServiceMapper(DivisionServiceMapper divisionServiceMapper) {
		this.divisionServiceMapper = divisionServiceMapper;
	}

}
