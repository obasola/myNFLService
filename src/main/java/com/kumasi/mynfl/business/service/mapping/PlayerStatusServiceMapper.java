/*
 * Created on 5 Jun 2016 ( Time 14:55:37 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.kumasi.mynfl.business.service.mapping;

import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.stereotype.Component;
import com.kumasi.mynfl.domain.PlayerStatus;
import com.kumasi.mynfl.domain.jpa.PlayerStatusEntity;
import com.kumasi.mynfl.domain.jpa.PlayerEntity;

/**
 * Mapping between entity beans and display beans.
 */
@Component
public class PlayerStatusServiceMapper extends AbstractServiceMapper {

	/**
	 * ModelMapper : bean to bean mapping library.
	 */
	private ModelMapper modelMapper;
	
	/**
	 * Constructor.
	 */
	public PlayerStatusServiceMapper() {
		modelMapper = new ModelMapper();
		modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
	}

	/**
	 * Mapping from 'PlayerStatusEntity' to 'PlayerStatus'
	 * @param playerStatusEntity
	 */
	public PlayerStatus mapPlayerStatusEntityToPlayerStatus(PlayerStatusEntity playerStatusEntity) {
		if(playerStatusEntity == null) {
			return null;
		}

		//--- Generic mapping 
		PlayerStatus playerStatus = map(playerStatusEntity, PlayerStatus.class);

		//--- Link mapping ( link to Player )
		if(playerStatusEntity.getPlayer() != null) {
			playerStatus.setPlayerId(playerStatusEntity.getPlayer().getId());
		}
		return playerStatus;
	}
	
	/**
	 * Mapping from 'PlayerStatus' to 'PlayerStatusEntity'
	 * @param playerStatus
	 * @param playerStatusEntity
	 */
	public void mapPlayerStatusToPlayerStatusEntity(PlayerStatus playerStatus, PlayerStatusEntity playerStatusEntity) {
		if(playerStatus == null) {
			return;
		}

		//--- Generic mapping 
		map(playerStatus, playerStatusEntity);

		//--- Link mapping ( link : playerStatus )
		if( hasLinkToPlayer(playerStatus) ) {
			PlayerEntity player1 = new PlayerEntity();
			player1.setId( playerStatus.getPlayerId() );
			playerStatusEntity.setPlayer( player1 );
		} else {
			playerStatusEntity.setPlayer( null );
		}

	}
	
	/**
	 * Verify that Player id is valid.
	 * @param Player Player
	 * @return boolean
	 */
	private boolean hasLinkToPlayer(PlayerStatus playerStatus) {
		if(playerStatus.getPlayerId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	protected ModelMapper getModelMapper() {
		return modelMapper;
	}

	protected void setModelMapper(ModelMapper modelMapper) {
		this.modelMapper = modelMapper;
	}

}