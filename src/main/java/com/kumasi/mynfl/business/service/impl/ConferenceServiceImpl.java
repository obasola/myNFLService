/*
 * Created on 5 Jun 2016 ( Time 14:55:36 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.kumasi.mynfl.business.service.impl;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import com.kumasi.mynfl.domain.Conference;
import com.kumasi.mynfl.domain.jpa.ConferenceEntity;
import java.util.List;
import com.kumasi.mynfl.business.service.ConferenceService;
import com.kumasi.mynfl.business.service.mapping.ConferenceServiceMapper;
import com.kumasi.mynfl.persistence.PersistenceServiceProvider;
import com.kumasi.mynfl.persistence.services.ConferencePersistence;
import org.springframework.stereotype.Component;

/**
 * Implementation of ConferenceService
 */
@Component
public class ConferenceServiceImpl implements ConferenceService {

	private ConferencePersistence conferencePersistence;

	@Resource
	private ConferenceServiceMapper conferenceServiceMapper;
	
	public ConferenceServiceImpl() {
		conferencePersistence = PersistenceServiceProvider.getService(ConferencePersistence.class);
	}
		
	@Override
	public Conference findById(Integer id) {
		ConferenceEntity entity = conferencePersistence.load(id);
		return conferenceServiceMapper.mapConferenceEntityToConference(entity);
	}

	@Override
	public List<Conference> findAll() {
		List<ConferenceEntity> entities = conferencePersistence.loadAll();
		List<Conference> beans = new ArrayList<Conference>();
		for(ConferenceEntity entity : entities) {
			beans.add(conferenceServiceMapper.mapConferenceEntityToConference(entity));
		}
		return beans;
	}

	@Override
	public Conference save(Conference conference) {
		return update(conference) ;
	}

	@Override
	public Conference create(Conference conference) {
		if(conferencePersistence.load(conference.getId()) != null) {
			throw new IllegalStateException("already.exists");
		}
		ConferenceEntity conferenceEntity = new ConferenceEntity();
		conferenceServiceMapper.mapConferenceToConferenceEntity(conference, conferenceEntity);
		ConferenceEntity conferenceEntitySaved = conferencePersistence.save(conferenceEntity);
		return conferenceServiceMapper.mapConferenceEntityToConference(conferenceEntitySaved);
	}

	@Override
	public Conference update(Conference conference) {
		ConferenceEntity conferenceEntity = conferencePersistence.load(conference.getId());
		conferenceServiceMapper.mapConferenceToConferenceEntity(conference, conferenceEntity);
		ConferenceEntity conferenceEntitySaved = conferencePersistence.save(conferenceEntity);
		return conferenceServiceMapper.mapConferenceEntityToConference(conferenceEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		conferencePersistence.delete(id);
	}

	public ConferencePersistence getConferencePersistence() {
		return conferencePersistence;
	}

	public void setConferencePersistence(ConferencePersistence conferencePersistence) {
		this.conferencePersistence = conferencePersistence;
	}

	public ConferenceServiceMapper getConferenceServiceMapper() {
		return conferenceServiceMapper;
	}

	public void setConferenceServiceMapper(ConferenceServiceMapper conferenceServiceMapper) {
		this.conferenceServiceMapper = conferenceServiceMapper;
	}

}
