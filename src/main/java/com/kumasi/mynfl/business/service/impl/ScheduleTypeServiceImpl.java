/*
 * Created on 5 Jun 2016 ( Time 14:55:37 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.kumasi.mynfl.business.service.impl;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import com.kumasi.mynfl.domain.ScheduleType;
import com.kumasi.mynfl.domain.jpa.ScheduleTypeEntity;
import java.util.List;
import com.kumasi.mynfl.business.service.ScheduleTypeService;
import com.kumasi.mynfl.business.service.mapping.ScheduleTypeServiceMapper;
import com.kumasi.mynfl.persistence.PersistenceServiceProvider;
import com.kumasi.mynfl.persistence.services.ScheduleTypePersistence;
import org.springframework.stereotype.Component;

/**
 * Implementation of ScheduleTypeService
 */
@Component
public class ScheduleTypeServiceImpl implements ScheduleTypeService {

	private ScheduleTypePersistence scheduleTypePersistence;

	@Resource
	private ScheduleTypeServiceMapper scheduleTypeServiceMapper;
	
	public ScheduleTypeServiceImpl() {
		scheduleTypePersistence = PersistenceServiceProvider.getService(ScheduleTypePersistence.class);
	}
		
	@Override
	public ScheduleType findById(Integer id) {
		ScheduleTypeEntity entity = scheduleTypePersistence.load(id);
		return scheduleTypeServiceMapper.mapScheduleTypeEntityToScheduleType(entity);
	}

	@Override
	public List<ScheduleType> findAll() {
		List<ScheduleTypeEntity> entities = scheduleTypePersistence.loadAll();
		List<ScheduleType> beans = new ArrayList<ScheduleType>();
		for(ScheduleTypeEntity entity : entities) {
			beans.add(scheduleTypeServiceMapper.mapScheduleTypeEntityToScheduleType(entity));
		}
		return beans;
	}

	@Override
	public ScheduleType save(ScheduleType scheduleType) {
		return update(scheduleType) ;
	}

	@Override
	public ScheduleType create(ScheduleType scheduleType) {
		if(scheduleTypePersistence.load(scheduleType.getId()) != null) {
			throw new IllegalStateException("already.exists");
		}
		ScheduleTypeEntity scheduleTypeEntity = new ScheduleTypeEntity();
		scheduleTypeServiceMapper.mapScheduleTypeToScheduleTypeEntity(scheduleType, scheduleTypeEntity);
		ScheduleTypeEntity scheduleTypeEntitySaved = scheduleTypePersistence.save(scheduleTypeEntity);
		return scheduleTypeServiceMapper.mapScheduleTypeEntityToScheduleType(scheduleTypeEntitySaved);
	}

	@Override
	public ScheduleType update(ScheduleType scheduleType) {
		ScheduleTypeEntity scheduleTypeEntity = scheduleTypePersistence.load(scheduleType.getId());
		scheduleTypeServiceMapper.mapScheduleTypeToScheduleTypeEntity(scheduleType, scheduleTypeEntity);
		ScheduleTypeEntity scheduleTypeEntitySaved = scheduleTypePersistence.save(scheduleTypeEntity);
		return scheduleTypeServiceMapper.mapScheduleTypeEntityToScheduleType(scheduleTypeEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		scheduleTypePersistence.delete(id);
	}

	public ScheduleTypePersistence getScheduleTypePersistence() {
		return scheduleTypePersistence;
	}

	public void setScheduleTypePersistence(ScheduleTypePersistence scheduleTypePersistence) {
		this.scheduleTypePersistence = scheduleTypePersistence;
	}

	public ScheduleTypeServiceMapper getScheduleTypeServiceMapper() {
		return scheduleTypeServiceMapper;
	}

	public void setScheduleTypeServiceMapper(ScheduleTypeServiceMapper scheduleTypeServiceMapper) {
		this.scheduleTypeServiceMapper = scheduleTypeServiceMapper;
	}

}
