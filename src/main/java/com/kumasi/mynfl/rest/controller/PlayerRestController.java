/*
 * Created on 5 Jun 2016 ( Time 14:55:48 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.kumasi.mynfl.rest.controller;

import java.util.LinkedList;
import java.util.List;

import javax.annotation.Resource;

import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;
import com.kumasi.mynfl.domain.Player;
import com.kumasi.mynfl.business.service.PlayerService;
import com.kumasi.mynfl.web.listitem.PlayerListItem;

/**
 * Spring MVC controller for 'Player' management.
 */
@Controller
public class PlayerRestController {

	@Resource
	private PlayerService playerService;
	
	@RequestMapping( value="/items/player",
			method = RequestMethod.GET,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public List<PlayerListItem> findAllAsListItems() {
		List<Player> list = playerService.findAll();
		List<PlayerListItem> items = new LinkedList<PlayerListItem>();
		for ( Player player : list ) {
			items.add(new PlayerListItem( player ) );
		}
		return items;
	}
	
	@RequestMapping( value="/player",
			method = RequestMethod.GET,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public List<Player> findAll() {
		return playerService.findAll();
	}

	@RequestMapping( value="/player/{id}",
			method = RequestMethod.GET,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public Player findOne(@PathVariable("id") Integer id) {
		return playerService.findById(id);
	}
	
	@RequestMapping( value="/player",
			method = RequestMethod.POST,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public Player create(@RequestBody Player player) {
		return playerService.create(player);
	}

	@RequestMapping( value="/player/{id}",
			method = RequestMethod.PUT,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public Player update(@PathVariable("id") Integer id, @RequestBody Player player) {
		return playerService.update(player);
	}

	@RequestMapping( value="/player/{id}",
			method = RequestMethod.DELETE,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public void delete(@PathVariable("id") Integer id) {
		playerService.delete(id);
	}
	
}
