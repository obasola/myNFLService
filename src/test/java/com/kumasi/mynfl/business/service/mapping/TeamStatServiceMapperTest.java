/*
 * Created on 5 Jun 2016 ( Time 14:55:37 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.kumasi.mynfl.business.service.mapping;

import static org.junit.Assert.assertEquals;

import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.stereotype.Component;
import com.kumasi.mynfl.domain.TeamStat;
import com.kumasi.mynfl.domain.jpa.TeamStatEntity;
import com.kumasi.mynfl.domain.jpa.TeamEntity;
import com.kumasi.mynfl.test.MockValues;

/**
 * Test : Mapping between entity beans and display beans.
 */
public class TeamStatServiceMapperTest {

	private TeamStatServiceMapper teamStatServiceMapper;

	private static ModelMapper modelMapper = new ModelMapper();

	private MockValues mockValues = new MockValues();
	
	
	@BeforeClass
	public static void setUp() {
		modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
	}
	
	@Before
	public void before() {
		teamStatServiceMapper = new TeamStatServiceMapper();
		teamStatServiceMapper.setModelMapper(modelMapper);
	}
	
	/**
	 * Mapping from 'TeamStatEntity' to 'TeamStat'
	 * @param teamStatEntity
	 */
	@Test
	public void testMapTeamStatEntityToTeamStat() {
		// Given
		TeamStatEntity teamStatEntity = new TeamStatEntity();
		teamStatEntity.setWon(mockValues.nextInteger());
		teamStatEntity.setLost(mockValues.nextInteger());
		teamStatEntity.setTied(mockValues.nextInteger());
		teamStatEntity.setPercent(mockValues.nextFloat());
		teamStatEntity.setPointsForced(mockValues.nextInteger());
		teamStatEntity.setPointsAllowed(mockValues.nextInteger());
		teamStatEntity.setNetPints(mockValues.nextInteger());
		teamStatEntity.setTouchdowns(mockValues.nextInteger());
		teamStatEntity.setHomeRecord(mockValues.nextString(5));
		teamStatEntity.setRoadRecord(mockValues.nextString(5));
		teamStatEntity.setDivisionRecord(mockValues.nextString(5));
		teamStatEntity.setConferenceRecord(mockValues.nextString(5));
		teamStatEntity.setPlayerStatscol(mockValues.nextString(45));
		teamStatEntity.setOverallPercent(mockValues.nextFloat());
		teamStatEntity.setStreak(mockValues.nextString(45));
		teamStatEntity.setLastFive(mockValues.nextString(5));
		teamStatEntity.setTeam(new TeamEntity());
		teamStatEntity.getTeam().setId(mockValues.nextInteger());
		
		// When
		TeamStat teamStat = teamStatServiceMapper.mapTeamStatEntityToTeamStat(teamStatEntity);
		
		// Then
		assertEquals(teamStatEntity.getWon(), teamStat.getWon());
		assertEquals(teamStatEntity.getLost(), teamStat.getLost());
		assertEquals(teamStatEntity.getTied(), teamStat.getTied());
		assertEquals(teamStatEntity.getPercent(), teamStat.getPercent());
		assertEquals(teamStatEntity.getPointsForced(), teamStat.getPointsForced());
		assertEquals(teamStatEntity.getPointsAllowed(), teamStat.getPointsAllowed());
		assertEquals(teamStatEntity.getNetPints(), teamStat.getNetPints());
		assertEquals(teamStatEntity.getTouchdowns(), teamStat.getTouchdowns());
		assertEquals(teamStatEntity.getHomeRecord(), teamStat.getHomeRecord());
		assertEquals(teamStatEntity.getRoadRecord(), teamStat.getRoadRecord());
		assertEquals(teamStatEntity.getDivisionRecord(), teamStat.getDivisionRecord());
		assertEquals(teamStatEntity.getConferenceRecord(), teamStat.getConferenceRecord());
		assertEquals(teamStatEntity.getPlayerStatscol(), teamStat.getPlayerStatscol());
		assertEquals(teamStatEntity.getOverallPercent(), teamStat.getOverallPercent());
		assertEquals(teamStatEntity.getStreak(), teamStat.getStreak());
		assertEquals(teamStatEntity.getLastFive(), teamStat.getLastFive());
		assertEquals(teamStatEntity.getTeam().getId(), teamStat.getTeamId());
	}
	
	/**
	 * Test : Mapping from 'TeamStat' to 'TeamStatEntity'
	 */
	@Test
	public void testMapTeamStatToTeamStatEntity() {
		// Given
		TeamStat teamStat = new TeamStat();
		teamStat.setWon(mockValues.nextInteger());
		teamStat.setLost(mockValues.nextInteger());
		teamStat.setTied(mockValues.nextInteger());
		teamStat.setPercent(mockValues.nextFloat());
		teamStat.setPointsForced(mockValues.nextInteger());
		teamStat.setPointsAllowed(mockValues.nextInteger());
		teamStat.setNetPints(mockValues.nextInteger());
		teamStat.setTouchdowns(mockValues.nextInteger());
		teamStat.setHomeRecord(mockValues.nextString(5));
		teamStat.setRoadRecord(mockValues.nextString(5));
		teamStat.setDivisionRecord(mockValues.nextString(5));
		teamStat.setConferenceRecord(mockValues.nextString(5));
		teamStat.setPlayerStatscol(mockValues.nextString(45));
		teamStat.setOverallPercent(mockValues.nextFloat());
		teamStat.setStreak(mockValues.nextString(45));
		teamStat.setLastFive(mockValues.nextString(5));
		teamStat.setTeamId(mockValues.nextInteger());

		TeamStatEntity teamStatEntity = new TeamStatEntity();
		
		// When
		teamStatServiceMapper.mapTeamStatToTeamStatEntity(teamStat, teamStatEntity);
		
		// Then
		assertEquals(teamStat.getWon(), teamStatEntity.getWon());
		assertEquals(teamStat.getLost(), teamStatEntity.getLost());
		assertEquals(teamStat.getTied(), teamStatEntity.getTied());
		assertEquals(teamStat.getPercent(), teamStatEntity.getPercent());
		assertEquals(teamStat.getPointsForced(), teamStatEntity.getPointsForced());
		assertEquals(teamStat.getPointsAllowed(), teamStatEntity.getPointsAllowed());
		assertEquals(teamStat.getNetPints(), teamStatEntity.getNetPints());
		assertEquals(teamStat.getTouchdowns(), teamStatEntity.getTouchdowns());
		assertEquals(teamStat.getHomeRecord(), teamStatEntity.getHomeRecord());
		assertEquals(teamStat.getRoadRecord(), teamStatEntity.getRoadRecord());
		assertEquals(teamStat.getDivisionRecord(), teamStatEntity.getDivisionRecord());
		assertEquals(teamStat.getConferenceRecord(), teamStatEntity.getConferenceRecord());
		assertEquals(teamStat.getPlayerStatscol(), teamStatEntity.getPlayerStatscol());
		assertEquals(teamStat.getOverallPercent(), teamStatEntity.getOverallPercent());
		assertEquals(teamStat.getStreak(), teamStatEntity.getStreak());
		assertEquals(teamStat.getLastFive(), teamStatEntity.getLastFive());
		assertEquals(teamStat.getTeamId(), teamStatEntity.getTeam().getId());
	}

}