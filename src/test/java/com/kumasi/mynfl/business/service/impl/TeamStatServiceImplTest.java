/*
 * Created on 5 Jun 2016 ( Time 14:55:37 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.kumasi.mynfl.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import com.kumasi.mynfl.domain.TeamStat;
import com.kumasi.mynfl.domain.jpa.TeamStatEntity;
import com.kumasi.mynfl.business.service.mapping.TeamStatServiceMapper;
import com.kumasi.mynfl.persistence.services.jpa.TeamStatPersistenceJPA;
import com.kumasi.mynfl.test.TeamStatFactoryForTest;
import com.kumasi.mynfl.test.TeamStatEntityFactoryForTest;
import com.kumasi.mynfl.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of TeamStatService
 */
@RunWith(MockitoJUnitRunner.class)
public class TeamStatServiceImplTest {

	@InjectMocks
	private TeamStatServiceImpl teamStatService;
	@Mock
	private TeamStatPersistenceJPA teamStatPersistenceJPA;
	@Mock
	private TeamStatServiceMapper teamStatServiceMapper;
	
	private TeamStatFactoryForTest teamStatFactoryForTest = new TeamStatFactoryForTest();

	private TeamStatEntityFactoryForTest teamStatEntityFactoryForTest = new TeamStatEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer id = mockValues.nextInteger();
		
		TeamStatEntity teamStatEntity = teamStatPersistenceJPA.load(id);
		
		TeamStat teamStat = teamStatFactoryForTest.newTeamStat();
		when(teamStatServiceMapper.mapTeamStatEntityToTeamStat(teamStatEntity)).thenReturn(teamStat);

		// When
		TeamStat teamStatFound = teamStatService.findById(id);

		// Then
		assertEquals(teamStat.getId(),teamStatFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<TeamStatEntity> teamStatEntitys = new ArrayList<TeamStatEntity>();
		TeamStatEntity teamStatEntity1 = teamStatEntityFactoryForTest.newTeamStatEntity();
		teamStatEntitys.add(teamStatEntity1);
		TeamStatEntity teamStatEntity2 = teamStatEntityFactoryForTest.newTeamStatEntity();
		teamStatEntitys.add(teamStatEntity2);
		when(teamStatPersistenceJPA.loadAll()).thenReturn(teamStatEntitys);
		
		TeamStat teamStat1 = teamStatFactoryForTest.newTeamStat();
		when(teamStatServiceMapper.mapTeamStatEntityToTeamStat(teamStatEntity1)).thenReturn(teamStat1);
		TeamStat teamStat2 = teamStatFactoryForTest.newTeamStat();
		when(teamStatServiceMapper.mapTeamStatEntityToTeamStat(teamStatEntity2)).thenReturn(teamStat2);

		// When
		List<TeamStat> teamStatsFounds = teamStatService.findAll();

		// Then
		assertTrue(teamStat1 == teamStatsFounds.get(0));
		assertTrue(teamStat2 == teamStatsFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		TeamStat teamStat = teamStatFactoryForTest.newTeamStat();

		TeamStatEntity teamStatEntity = teamStatEntityFactoryForTest.newTeamStatEntity();
		when(teamStatPersistenceJPA.load(teamStat.getId())).thenReturn(null);
		
		teamStatEntity = new TeamStatEntity();
		teamStatServiceMapper.mapTeamStatToTeamStatEntity(teamStat, teamStatEntity);
		TeamStatEntity teamStatEntitySaved = teamStatPersistenceJPA.save(teamStatEntity);
		
		TeamStat teamStatSaved = teamStatFactoryForTest.newTeamStat();
		when(teamStatServiceMapper.mapTeamStatEntityToTeamStat(teamStatEntitySaved)).thenReturn(teamStatSaved);

		// When
		TeamStat teamStatResult = teamStatService.create(teamStat);

		// Then
		assertTrue(teamStatResult == teamStatSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		TeamStat teamStat = teamStatFactoryForTest.newTeamStat();

		TeamStatEntity teamStatEntity = teamStatEntityFactoryForTest.newTeamStatEntity();
		when(teamStatPersistenceJPA.load(teamStat.getId())).thenReturn(teamStatEntity);

		// When
		Exception exception = null;
		try {
			teamStatService.create(teamStat);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		TeamStat teamStat = teamStatFactoryForTest.newTeamStat();

		TeamStatEntity teamStatEntity = teamStatEntityFactoryForTest.newTeamStatEntity();
		when(teamStatPersistenceJPA.load(teamStat.getId())).thenReturn(teamStatEntity);
		
		TeamStatEntity teamStatEntitySaved = teamStatEntityFactoryForTest.newTeamStatEntity();
		when(teamStatPersistenceJPA.save(teamStatEntity)).thenReturn(teamStatEntitySaved);
		
		TeamStat teamStatSaved = teamStatFactoryForTest.newTeamStat();
		when(teamStatServiceMapper.mapTeamStatEntityToTeamStat(teamStatEntitySaved)).thenReturn(teamStatSaved);

		// When
		TeamStat teamStatResult = teamStatService.update(teamStat);

		// Then
		verify(teamStatServiceMapper).mapTeamStatToTeamStatEntity(teamStat, teamStatEntity);
		assertTrue(teamStatResult == teamStatSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer id = mockValues.nextInteger();

		// When
		teamStatService.delete(id);

		// Then
		verify(teamStatPersistenceJPA).delete(id);
		
	}

}
