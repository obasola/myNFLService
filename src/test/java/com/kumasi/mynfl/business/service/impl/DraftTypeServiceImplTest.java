/*
 * Created on 5 Jun 2016 ( Time 14:55:36 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.kumasi.mynfl.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import com.kumasi.mynfl.domain.DraftType;
import com.kumasi.mynfl.domain.jpa.DraftTypeEntity;
import java.util.List;
import com.kumasi.mynfl.business.service.mapping.DraftTypeServiceMapper;
import com.kumasi.mynfl.persistence.services.jpa.DraftTypePersistenceJPA;
import com.kumasi.mynfl.test.DraftTypeFactoryForTest;
import com.kumasi.mynfl.test.DraftTypeEntityFactoryForTest;
import com.kumasi.mynfl.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of DraftTypeService
 */
@RunWith(MockitoJUnitRunner.class)
public class DraftTypeServiceImplTest {

	@InjectMocks
	private DraftTypeServiceImpl draftTypeService;
	@Mock
	private DraftTypePersistenceJPA draftTypePersistenceJPA;
	@Mock
	private DraftTypeServiceMapper draftTypeServiceMapper;
	
	private DraftTypeFactoryForTest draftTypeFactoryForTest = new DraftTypeFactoryForTest();

	private DraftTypeEntityFactoryForTest draftTypeEntityFactoryForTest = new DraftTypeEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer id = mockValues.nextInteger();
		
		DraftTypeEntity draftTypeEntity = draftTypePersistenceJPA.load(id);
		
		DraftType draftType = draftTypeFactoryForTest.newDraftType();
		when(draftTypeServiceMapper.mapDraftTypeEntityToDraftType(draftTypeEntity)).thenReturn(draftType);

		// When
		DraftType draftTypeFound = draftTypeService.findById(id);

		// Then
		assertEquals(draftType.getId(),draftTypeFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<DraftTypeEntity> draftTypeEntitys = new ArrayList<DraftTypeEntity>();
		DraftTypeEntity draftTypeEntity1 = draftTypeEntityFactoryForTest.newDraftTypeEntity();
		draftTypeEntitys.add(draftTypeEntity1);
		DraftTypeEntity draftTypeEntity2 = draftTypeEntityFactoryForTest.newDraftTypeEntity();
		draftTypeEntitys.add(draftTypeEntity2);
		when(draftTypePersistenceJPA.loadAll()).thenReturn(draftTypeEntitys);
		
		DraftType draftType1 = draftTypeFactoryForTest.newDraftType();
		when(draftTypeServiceMapper.mapDraftTypeEntityToDraftType(draftTypeEntity1)).thenReturn(draftType1);
		DraftType draftType2 = draftTypeFactoryForTest.newDraftType();
		when(draftTypeServiceMapper.mapDraftTypeEntityToDraftType(draftTypeEntity2)).thenReturn(draftType2);

		// When
		List<DraftType> draftTypesFounds = draftTypeService.findAll();

		// Then
		assertTrue(draftType1 == draftTypesFounds.get(0));
		assertTrue(draftType2 == draftTypesFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		DraftType draftType = draftTypeFactoryForTest.newDraftType();

		DraftTypeEntity draftTypeEntity = draftTypeEntityFactoryForTest.newDraftTypeEntity();
		when(draftTypePersistenceJPA.load(draftType.getId())).thenReturn(null);
		
		draftTypeEntity = new DraftTypeEntity();
		draftTypeServiceMapper.mapDraftTypeToDraftTypeEntity(draftType, draftTypeEntity);
		DraftTypeEntity draftTypeEntitySaved = draftTypePersistenceJPA.save(draftTypeEntity);
		
		DraftType draftTypeSaved = draftTypeFactoryForTest.newDraftType();
		when(draftTypeServiceMapper.mapDraftTypeEntityToDraftType(draftTypeEntitySaved)).thenReturn(draftTypeSaved);

		// When
		DraftType draftTypeResult = draftTypeService.create(draftType);

		// Then
		assertTrue(draftTypeResult == draftTypeSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		DraftType draftType = draftTypeFactoryForTest.newDraftType();

		DraftTypeEntity draftTypeEntity = draftTypeEntityFactoryForTest.newDraftTypeEntity();
		when(draftTypePersistenceJPA.load(draftType.getId())).thenReturn(draftTypeEntity);

		// When
		Exception exception = null;
		try {
			draftTypeService.create(draftType);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		DraftType draftType = draftTypeFactoryForTest.newDraftType();

		DraftTypeEntity draftTypeEntity = draftTypeEntityFactoryForTest.newDraftTypeEntity();
		when(draftTypePersistenceJPA.load(draftType.getId())).thenReturn(draftTypeEntity);
		
		DraftTypeEntity draftTypeEntitySaved = draftTypeEntityFactoryForTest.newDraftTypeEntity();
		when(draftTypePersistenceJPA.save(draftTypeEntity)).thenReturn(draftTypeEntitySaved);
		
		DraftType draftTypeSaved = draftTypeFactoryForTest.newDraftType();
		when(draftTypeServiceMapper.mapDraftTypeEntityToDraftType(draftTypeEntitySaved)).thenReturn(draftTypeSaved);

		// When
		DraftType draftTypeResult = draftTypeService.update(draftType);

		// Then
		verify(draftTypeServiceMapper).mapDraftTypeToDraftTypeEntity(draftType, draftTypeEntity);
		assertTrue(draftTypeResult == draftTypeSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer id = mockValues.nextInteger();

		// When
		draftTypeService.delete(id);

		// Then
		verify(draftTypePersistenceJPA).delete(id);
		
	}

}
