/*
 * Created on 5 Jun 2016 ( Time 14:55:36 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.kumasi.mynfl.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import com.kumasi.mynfl.domain.Player;
import com.kumasi.mynfl.domain.jpa.PlayerEntity;
import java.util.Date;
import java.util.List;
import com.kumasi.mynfl.business.service.mapping.PlayerServiceMapper;
import com.kumasi.mynfl.persistence.services.jpa.PlayerPersistenceJPA;
import com.kumasi.mynfl.test.PlayerFactoryForTest;
import com.kumasi.mynfl.test.PlayerEntityFactoryForTest;
import com.kumasi.mynfl.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of PlayerService
 */
@RunWith(MockitoJUnitRunner.class)
public class PlayerServiceImplTest {

	@InjectMocks
	private PlayerServiceImpl playerService;
	@Mock
	private PlayerPersistenceJPA playerPersistenceJPA;
	@Mock
	private PlayerServiceMapper playerServiceMapper;
	
	private PlayerFactoryForTest playerFactoryForTest = new PlayerFactoryForTest();

	private PlayerEntityFactoryForTest playerEntityFactoryForTest = new PlayerEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer id = mockValues.nextInteger();
		
		PlayerEntity playerEntity = playerPersistenceJPA.load(id);
		
		Player player = playerFactoryForTest.newPlayer();
		when(playerServiceMapper.mapPlayerEntityToPlayer(playerEntity)).thenReturn(player);

		// When
		Player playerFound = playerService.findById(id);

		// Then
		assertEquals(player.getId(),playerFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<PlayerEntity> playerEntitys = new ArrayList<PlayerEntity>();
		PlayerEntity playerEntity1 = playerEntityFactoryForTest.newPlayerEntity();
		playerEntitys.add(playerEntity1);
		PlayerEntity playerEntity2 = playerEntityFactoryForTest.newPlayerEntity();
		playerEntitys.add(playerEntity2);
		when(playerPersistenceJPA.loadAll()).thenReturn(playerEntitys);
		
		Player player1 = playerFactoryForTest.newPlayer();
		when(playerServiceMapper.mapPlayerEntityToPlayer(playerEntity1)).thenReturn(player1);
		Player player2 = playerFactoryForTest.newPlayer();
		when(playerServiceMapper.mapPlayerEntityToPlayer(playerEntity2)).thenReturn(player2);

		// When
		List<Player> playersFounds = playerService.findAll();

		// Then
		assertTrue(player1 == playersFounds.get(0));
		assertTrue(player2 == playersFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		Player player = playerFactoryForTest.newPlayer();

		PlayerEntity playerEntity = playerEntityFactoryForTest.newPlayerEntity();
		when(playerPersistenceJPA.load(player.getId())).thenReturn(null);
		
		playerEntity = new PlayerEntity();
		playerServiceMapper.mapPlayerToPlayerEntity(player, playerEntity);
		PlayerEntity playerEntitySaved = playerPersistenceJPA.save(playerEntity);
		
		Player playerSaved = playerFactoryForTest.newPlayer();
		when(playerServiceMapper.mapPlayerEntityToPlayer(playerEntitySaved)).thenReturn(playerSaved);

		// When
		Player playerResult = playerService.create(player);

		// Then
		assertTrue(playerResult == playerSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		Player player = playerFactoryForTest.newPlayer();

		PlayerEntity playerEntity = playerEntityFactoryForTest.newPlayerEntity();
		when(playerPersistenceJPA.load(player.getId())).thenReturn(playerEntity);

		// When
		Exception exception = null;
		try {
			playerService.create(player);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		Player player = playerFactoryForTest.newPlayer();

		PlayerEntity playerEntity = playerEntityFactoryForTest.newPlayerEntity();
		when(playerPersistenceJPA.load(player.getId())).thenReturn(playerEntity);
		
		PlayerEntity playerEntitySaved = playerEntityFactoryForTest.newPlayerEntity();
		when(playerPersistenceJPA.save(playerEntity)).thenReturn(playerEntitySaved);
		
		Player playerSaved = playerFactoryForTest.newPlayer();
		when(playerServiceMapper.mapPlayerEntityToPlayer(playerEntitySaved)).thenReturn(playerSaved);

		// When
		Player playerResult = playerService.update(player);

		// Then
		verify(playerServiceMapper).mapPlayerToPlayerEntity(player, playerEntity);
		assertTrue(playerResult == playerSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer id = mockValues.nextInteger();

		// When
		playerService.delete(id);

		// Then
		verify(playerPersistenceJPA).delete(id);
		
	}

}
