/*
 * Created on 5 Jun 2016 ( Time 14:55:37 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.kumasi.mynfl.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import com.kumasi.mynfl.domain.PlayerStatus;
import com.kumasi.mynfl.domain.jpa.PlayerStatusEntity;
import com.kumasi.mynfl.domain.jpa.PlayerStatusEntityKey;
import com.kumasi.mynfl.business.service.mapping.PlayerStatusServiceMapper;
import com.kumasi.mynfl.persistence.services.jpa.PlayerStatusPersistenceJPA;
import com.kumasi.mynfl.test.PlayerStatusFactoryForTest;
import com.kumasi.mynfl.test.PlayerStatusEntityFactoryForTest;
import com.kumasi.mynfl.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of PlayerStatusService
 */
@RunWith(MockitoJUnitRunner.class)
public class PlayerStatusServiceImplTest {

	@InjectMocks
	private PlayerStatusServiceImpl playerStatusService;
	@Mock
	private PlayerStatusPersistenceJPA playerStatusPersistenceJPA;
	@Mock
	private PlayerStatusServiceMapper playerStatusServiceMapper;
	
	private PlayerStatusFactoryForTest playerStatusFactoryForTest = new PlayerStatusFactoryForTest();

	private PlayerStatusEntityFactoryForTest playerStatusEntityFactoryForTest = new PlayerStatusEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer id = mockValues.nextInteger();
		Integer statusId = mockValues.nextInteger();
		
		PlayerStatusEntityKey playerStatusEntityKey = new PlayerStatusEntityKey(id, statusId);
		playerStatusEntityKey.setId(id);
		playerStatusEntityKey.setStatusId(statusId);
		
		PlayerStatusEntity playerStatusEntity = playerStatusPersistenceJPA.load(playerStatusEntityKey);
		
		PlayerStatus playerStatus = playerStatusFactoryForTest.newPlayerStatus();
		when(playerStatusServiceMapper.mapPlayerStatusEntityToPlayerStatus(playerStatusEntity)).thenReturn(playerStatus);

		// When
		PlayerStatus playerStatusFound = playerStatusService.findById(id, statusId);

		// Then
		assertEquals(playerStatus.getId(),playerStatusFound.getId());
		assertEquals(playerStatus.getStatusId(),playerStatusFound.getStatusId());
	}

	@Test
	public void findAll() {
		// Given
		List<PlayerStatusEntity> playerStatusEntitys = new ArrayList<PlayerStatusEntity>();
		PlayerStatusEntity playerStatusEntity1 = playerStatusEntityFactoryForTest.newPlayerStatusEntity();
		playerStatusEntitys.add(playerStatusEntity1);
		PlayerStatusEntity playerStatusEntity2 = playerStatusEntityFactoryForTest.newPlayerStatusEntity();
		playerStatusEntitys.add(playerStatusEntity2);
		when(playerStatusPersistenceJPA.loadAll()).thenReturn(playerStatusEntitys);
		
		PlayerStatus playerStatus1 = playerStatusFactoryForTest.newPlayerStatus();
		when(playerStatusServiceMapper.mapPlayerStatusEntityToPlayerStatus(playerStatusEntity1)).thenReturn(playerStatus1);
		PlayerStatus playerStatus2 = playerStatusFactoryForTest.newPlayerStatus();
		when(playerStatusServiceMapper.mapPlayerStatusEntityToPlayerStatus(playerStatusEntity2)).thenReturn(playerStatus2);

		// When
		List<PlayerStatus> playerStatussFounds = playerStatusService.findAll();

		// Then
		assertTrue(playerStatus1 == playerStatussFounds.get(0));
		assertTrue(playerStatus2 == playerStatussFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		PlayerStatus playerStatus = playerStatusFactoryForTest.newPlayerStatus();

		PlayerStatusEntity playerStatusEntity = playerStatusEntityFactoryForTest.newPlayerStatusEntity();
		when(playerStatusPersistenceJPA.load(playerStatus.getId(), playerStatus.getStatusId())).thenReturn(null);
		
		playerStatusEntity = new PlayerStatusEntity();
		playerStatusServiceMapper.mapPlayerStatusToPlayerStatusEntity(playerStatus, playerStatusEntity);
		PlayerStatusEntity playerStatusEntitySaved = playerStatusPersistenceJPA.save(playerStatusEntity);
		
		PlayerStatus playerStatusSaved = playerStatusFactoryForTest.newPlayerStatus();
		when(playerStatusServiceMapper.mapPlayerStatusEntityToPlayerStatus(playerStatusEntitySaved)).thenReturn(playerStatusSaved);

		// When
		PlayerStatus playerStatusResult = playerStatusService.create(playerStatus);

		// Then
		assertTrue(playerStatusResult == playerStatusSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		PlayerStatus playerStatus = playerStatusFactoryForTest.newPlayerStatus();

		PlayerStatusEntity playerStatusEntity = playerStatusEntityFactoryForTest.newPlayerStatusEntity();
		when(playerStatusPersistenceJPA.load(playerStatus.getId(), playerStatus.getStatusId())).thenReturn(playerStatusEntity);

		// When
		Exception exception = null;
		try {
			playerStatusService.create(playerStatus);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		PlayerStatus playerStatus = playerStatusFactoryForTest.newPlayerStatus();

		PlayerStatusEntity playerStatusEntity = playerStatusEntityFactoryForTest.newPlayerStatusEntity();
		when(playerStatusPersistenceJPA.load(playerStatus.getId(), playerStatus.getStatusId())).thenReturn(playerStatusEntity);
		
		PlayerStatusEntity playerStatusEntitySaved = playerStatusEntityFactoryForTest.newPlayerStatusEntity();
		when(playerStatusPersistenceJPA.save(playerStatusEntity)).thenReturn(playerStatusEntitySaved);
		
		PlayerStatus playerStatusSaved = playerStatusFactoryForTest.newPlayerStatus();
		when(playerStatusServiceMapper.mapPlayerStatusEntityToPlayerStatus(playerStatusEntitySaved)).thenReturn(playerStatusSaved);

		// When
		PlayerStatus playerStatusResult = playerStatusService.update(playerStatus);

		// Then
		verify(playerStatusServiceMapper).mapPlayerStatusToPlayerStatusEntity(playerStatus, playerStatusEntity);
		assertTrue(playerStatusResult == playerStatusSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer id = mockValues.nextInteger();
		Integer statusId = mockValues.nextInteger();

		// When
		playerStatusService.delete(id, statusId);

		// Then
		verify(playerStatusPersistenceJPA).delete(id, statusId);
		
	}

}
