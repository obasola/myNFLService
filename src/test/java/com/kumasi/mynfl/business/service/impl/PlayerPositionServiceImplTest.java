/*
 * Created on 5 Jun 2016 ( Time 14:55:36 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.kumasi.mynfl.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import com.kumasi.mynfl.domain.PlayerPosition;
import com.kumasi.mynfl.domain.jpa.PlayerPositionEntity;
import java.util.List;
import com.kumasi.mynfl.business.service.mapping.PlayerPositionServiceMapper;
import com.kumasi.mynfl.persistence.services.jpa.PlayerPositionPersistenceJPA;
import com.kumasi.mynfl.test.PlayerPositionFactoryForTest;
import com.kumasi.mynfl.test.PlayerPositionEntityFactoryForTest;
import com.kumasi.mynfl.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of PlayerPositionService
 */
@RunWith(MockitoJUnitRunner.class)
public class PlayerPositionServiceImplTest {

	@InjectMocks
	private PlayerPositionServiceImpl playerPositionService;
	@Mock
	private PlayerPositionPersistenceJPA playerPositionPersistenceJPA;
	@Mock
	private PlayerPositionServiceMapper playerPositionServiceMapper;
	
	private PlayerPositionFactoryForTest playerPositionFactoryForTest = new PlayerPositionFactoryForTest();

	private PlayerPositionEntityFactoryForTest playerPositionEntityFactoryForTest = new PlayerPositionEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer id = mockValues.nextInteger();
		
		PlayerPositionEntity playerPositionEntity = playerPositionPersistenceJPA.load(id);
		
		PlayerPosition playerPosition = playerPositionFactoryForTest.newPlayerPosition();
		when(playerPositionServiceMapper.mapPlayerPositionEntityToPlayerPosition(playerPositionEntity)).thenReturn(playerPosition);

		// When
		PlayerPosition playerPositionFound = playerPositionService.findById(id);

		// Then
		assertEquals(playerPosition.getId(),playerPositionFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<PlayerPositionEntity> playerPositionEntitys = new ArrayList<PlayerPositionEntity>();
		PlayerPositionEntity playerPositionEntity1 = playerPositionEntityFactoryForTest.newPlayerPositionEntity();
		playerPositionEntitys.add(playerPositionEntity1);
		PlayerPositionEntity playerPositionEntity2 = playerPositionEntityFactoryForTest.newPlayerPositionEntity();
		playerPositionEntitys.add(playerPositionEntity2);
		when(playerPositionPersistenceJPA.loadAll()).thenReturn(playerPositionEntitys);
		
		PlayerPosition playerPosition1 = playerPositionFactoryForTest.newPlayerPosition();
		when(playerPositionServiceMapper.mapPlayerPositionEntityToPlayerPosition(playerPositionEntity1)).thenReturn(playerPosition1);
		PlayerPosition playerPosition2 = playerPositionFactoryForTest.newPlayerPosition();
		when(playerPositionServiceMapper.mapPlayerPositionEntityToPlayerPosition(playerPositionEntity2)).thenReturn(playerPosition2);

		// When
		List<PlayerPosition> playerPositionsFounds = playerPositionService.findAll();

		// Then
		assertTrue(playerPosition1 == playerPositionsFounds.get(0));
		assertTrue(playerPosition2 == playerPositionsFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		PlayerPosition playerPosition = playerPositionFactoryForTest.newPlayerPosition();

		PlayerPositionEntity playerPositionEntity = playerPositionEntityFactoryForTest.newPlayerPositionEntity();
		when(playerPositionPersistenceJPA.load(playerPosition.getId())).thenReturn(null);
		
		playerPositionEntity = new PlayerPositionEntity();
		playerPositionServiceMapper.mapPlayerPositionToPlayerPositionEntity(playerPosition, playerPositionEntity);
		PlayerPositionEntity playerPositionEntitySaved = playerPositionPersistenceJPA.save(playerPositionEntity);
		
		PlayerPosition playerPositionSaved = playerPositionFactoryForTest.newPlayerPosition();
		when(playerPositionServiceMapper.mapPlayerPositionEntityToPlayerPosition(playerPositionEntitySaved)).thenReturn(playerPositionSaved);

		// When
		PlayerPosition playerPositionResult = playerPositionService.create(playerPosition);

		// Then
		assertTrue(playerPositionResult == playerPositionSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		PlayerPosition playerPosition = playerPositionFactoryForTest.newPlayerPosition();

		PlayerPositionEntity playerPositionEntity = playerPositionEntityFactoryForTest.newPlayerPositionEntity();
		when(playerPositionPersistenceJPA.load(playerPosition.getId())).thenReturn(playerPositionEntity);

		// When
		Exception exception = null;
		try {
			playerPositionService.create(playerPosition);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		PlayerPosition playerPosition = playerPositionFactoryForTest.newPlayerPosition();

		PlayerPositionEntity playerPositionEntity = playerPositionEntityFactoryForTest.newPlayerPositionEntity();
		when(playerPositionPersistenceJPA.load(playerPosition.getId())).thenReturn(playerPositionEntity);
		
		PlayerPositionEntity playerPositionEntitySaved = playerPositionEntityFactoryForTest.newPlayerPositionEntity();
		when(playerPositionPersistenceJPA.save(playerPositionEntity)).thenReturn(playerPositionEntitySaved);
		
		PlayerPosition playerPositionSaved = playerPositionFactoryForTest.newPlayerPosition();
		when(playerPositionServiceMapper.mapPlayerPositionEntityToPlayerPosition(playerPositionEntitySaved)).thenReturn(playerPositionSaved);

		// When
		PlayerPosition playerPositionResult = playerPositionService.update(playerPosition);

		// Then
		verify(playerPositionServiceMapper).mapPlayerPositionToPlayerPositionEntity(playerPosition, playerPositionEntity);
		assertTrue(playerPositionResult == playerPositionSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer id = mockValues.nextInteger();

		// When
		playerPositionService.delete(id);

		// Then
		verify(playerPositionPersistenceJPA).delete(id);
		
	}

}
