/*
 * Created on 5 Jun 2016 ( Time 14:55:36 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.kumasi.mynfl.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import com.kumasi.mynfl.domain.DraftTeam;
import com.kumasi.mynfl.domain.jpa.DraftTeamEntity;
import java.util.List;
import com.kumasi.mynfl.business.service.mapping.DraftTeamServiceMapper;
import com.kumasi.mynfl.persistence.services.jpa.DraftTeamPersistenceJPA;
import com.kumasi.mynfl.test.DraftTeamFactoryForTest;
import com.kumasi.mynfl.test.DraftTeamEntityFactoryForTest;
import com.kumasi.mynfl.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of DraftTeamService
 */
@RunWith(MockitoJUnitRunner.class)
public class DraftTeamServiceImplTest {

	@InjectMocks
	private DraftTeamServiceImpl draftTeamService;
	@Mock
	private DraftTeamPersistenceJPA draftTeamPersistenceJPA;
	@Mock
	private DraftTeamServiceMapper draftTeamServiceMapper;
	
	private DraftTeamFactoryForTest draftTeamFactoryForTest = new DraftTeamFactoryForTest();

	private DraftTeamEntityFactoryForTest draftTeamEntityFactoryForTest = new DraftTeamEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer id = mockValues.nextInteger();
		
		DraftTeamEntity draftTeamEntity = draftTeamPersistenceJPA.load(id);
		
		DraftTeam draftTeam = draftTeamFactoryForTest.newDraftTeam();
		when(draftTeamServiceMapper.mapDraftTeamEntityToDraftTeam(draftTeamEntity)).thenReturn(draftTeam);

		// When
		DraftTeam draftTeamFound = draftTeamService.findById(id);

		// Then
		assertEquals(draftTeam.getId(),draftTeamFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<DraftTeamEntity> draftTeamEntitys = new ArrayList<DraftTeamEntity>();
		DraftTeamEntity draftTeamEntity1 = draftTeamEntityFactoryForTest.newDraftTeamEntity();
		draftTeamEntitys.add(draftTeamEntity1);
		DraftTeamEntity draftTeamEntity2 = draftTeamEntityFactoryForTest.newDraftTeamEntity();
		draftTeamEntitys.add(draftTeamEntity2);
		when(draftTeamPersistenceJPA.loadAll()).thenReturn(draftTeamEntitys);
		
		DraftTeam draftTeam1 = draftTeamFactoryForTest.newDraftTeam();
		when(draftTeamServiceMapper.mapDraftTeamEntityToDraftTeam(draftTeamEntity1)).thenReturn(draftTeam1);
		DraftTeam draftTeam2 = draftTeamFactoryForTest.newDraftTeam();
		when(draftTeamServiceMapper.mapDraftTeamEntityToDraftTeam(draftTeamEntity2)).thenReturn(draftTeam2);

		// When
		List<DraftTeam> draftTeamsFounds = draftTeamService.findAll();

		// Then
		assertTrue(draftTeam1 == draftTeamsFounds.get(0));
		assertTrue(draftTeam2 == draftTeamsFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		DraftTeam draftTeam = draftTeamFactoryForTest.newDraftTeam();

		DraftTeamEntity draftTeamEntity = draftTeamEntityFactoryForTest.newDraftTeamEntity();
		when(draftTeamPersistenceJPA.load(draftTeam.getId())).thenReturn(null);
		
		draftTeamEntity = new DraftTeamEntity();
		draftTeamServiceMapper.mapDraftTeamToDraftTeamEntity(draftTeam, draftTeamEntity);
		DraftTeamEntity draftTeamEntitySaved = draftTeamPersistenceJPA.save(draftTeamEntity);
		
		DraftTeam draftTeamSaved = draftTeamFactoryForTest.newDraftTeam();
		when(draftTeamServiceMapper.mapDraftTeamEntityToDraftTeam(draftTeamEntitySaved)).thenReturn(draftTeamSaved);

		// When
		DraftTeam draftTeamResult = draftTeamService.create(draftTeam);

		// Then
		assertTrue(draftTeamResult == draftTeamSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		DraftTeam draftTeam = draftTeamFactoryForTest.newDraftTeam();

		DraftTeamEntity draftTeamEntity = draftTeamEntityFactoryForTest.newDraftTeamEntity();
		when(draftTeamPersistenceJPA.load(draftTeam.getId())).thenReturn(draftTeamEntity);

		// When
		Exception exception = null;
		try {
			draftTeamService.create(draftTeam);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		DraftTeam draftTeam = draftTeamFactoryForTest.newDraftTeam();

		DraftTeamEntity draftTeamEntity = draftTeamEntityFactoryForTest.newDraftTeamEntity();
		when(draftTeamPersistenceJPA.load(draftTeam.getId())).thenReturn(draftTeamEntity);
		
		DraftTeamEntity draftTeamEntitySaved = draftTeamEntityFactoryForTest.newDraftTeamEntity();
		when(draftTeamPersistenceJPA.save(draftTeamEntity)).thenReturn(draftTeamEntitySaved);
		
		DraftTeam draftTeamSaved = draftTeamFactoryForTest.newDraftTeam();
		when(draftTeamServiceMapper.mapDraftTeamEntityToDraftTeam(draftTeamEntitySaved)).thenReturn(draftTeamSaved);

		// When
		DraftTeam draftTeamResult = draftTeamService.update(draftTeam);

		// Then
		verify(draftTeamServiceMapper).mapDraftTeamToDraftTeamEntity(draftTeam, draftTeamEntity);
		assertTrue(draftTeamResult == draftTeamSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer id = mockValues.nextInteger();

		// When
		draftTeamService.delete(id);

		// Then
		verify(draftTeamPersistenceJPA).delete(id);
		
	}

}
