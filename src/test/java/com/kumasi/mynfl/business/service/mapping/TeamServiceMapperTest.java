/*
 * Created on 5 Jun 2016 ( Time 14:55:37 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.kumasi.mynfl.business.service.mapping;

import static org.junit.Assert.assertEquals;

import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.stereotype.Component;
import com.kumasi.mynfl.domain.Team;
import com.kumasi.mynfl.domain.jpa.TeamEntity;
import com.kumasi.mynfl.domain.jpa.DivisionEntity;
import com.kumasi.mynfl.test.MockValues;

/**
 * Test : Mapping between entity beans and display beans.
 */
public class TeamServiceMapperTest {

	private TeamServiceMapper teamServiceMapper;

	private static ModelMapper modelMapper = new ModelMapper();

	private MockValues mockValues = new MockValues();
	
	
	@BeforeClass
	public static void setUp() {
		modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
	}
	
	@Before
	public void before() {
		teamServiceMapper = new TeamServiceMapper();
		teamServiceMapper.setModelMapper(modelMapper);
	}
	
	/**
	 * Mapping from 'TeamEntity' to 'Team'
	 * @param teamEntity
	 */
	@Test
	public void testMapTeamEntityToTeam() {
		// Given
		TeamEntity teamEntity = new TeamEntity();
		teamEntity.setCode(mockValues.nextString(3));
		teamEntity.setName(mockValues.nextString(45));
		teamEntity.setCity(mockValues.nextString(45));
		teamEntity.setState(mockValues.nextString(45));
		teamEntity.setStadium(mockValues.nextString(45));
		teamEntity.setOwner(mockValues.nextString(45));
		teamEntity.setHeadCoach(mockValues.nextString(45));
		teamEntity.setDivision(new DivisionEntity());
		teamEntity.getDivision().setId(mockValues.nextInteger());
		
		// When
		Team team = teamServiceMapper.mapTeamEntityToTeam(teamEntity);
		
		// Then
		assertEquals(teamEntity.getCode(), team.getCode());
		assertEquals(teamEntity.getName(), team.getName());
		assertEquals(teamEntity.getCity(), team.getCity());
		assertEquals(teamEntity.getState(), team.getState());
		assertEquals(teamEntity.getStadium(), team.getStadium());
		assertEquals(teamEntity.getOwner(), team.getOwner());
		assertEquals(teamEntity.getHeadCoach(), team.getHeadCoach());
		assertEquals(teamEntity.getDivision().getId(), team.getDivisionId());
	}
	
	/**
	 * Test : Mapping from 'Team' to 'TeamEntity'
	 */
	@Test
	public void testMapTeamToTeamEntity() {
		// Given
		Team team = new Team();
		team.setCode(mockValues.nextString(3));
		team.setName(mockValues.nextString(45));
		team.setCity(mockValues.nextString(45));
		team.setState(mockValues.nextString(45));
		team.setStadium(mockValues.nextString(45));
		team.setOwner(mockValues.nextString(45));
		team.setHeadCoach(mockValues.nextString(45));
		team.setDivisionId(mockValues.nextInteger());

		TeamEntity teamEntity = new TeamEntity();
		
		// When
		teamServiceMapper.mapTeamToTeamEntity(team, teamEntity);
		
		// Then
		assertEquals(team.getCode(), teamEntity.getCode());
		assertEquals(team.getName(), teamEntity.getName());
		assertEquals(team.getCity(), teamEntity.getCity());
		assertEquals(team.getState(), teamEntity.getState());
		assertEquals(team.getStadium(), teamEntity.getStadium());
		assertEquals(team.getOwner(), teamEntity.getOwner());
		assertEquals(team.getHeadCoach(), teamEntity.getHeadCoach());
		assertEquals(team.getDivisionId(), teamEntity.getDivision().getId());
	}

}