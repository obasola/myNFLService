/*
 * Created on 5 Jun 2016 ( Time 14:55:36 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.kumasi.mynfl.business.service.mapping;

import static org.junit.Assert.assertEquals;

import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.stereotype.Component;
import com.kumasi.mynfl.domain.Player;
import com.kumasi.mynfl.domain.jpa.PlayerEntity;
import com.kumasi.mynfl.domain.jpa.PlayerPositionEntity;
import com.kumasi.mynfl.domain.jpa.TeamEntity;
import com.kumasi.mynfl.test.MockValues;

/**
 * Test : Mapping between entity beans and display beans.
 */
public class PlayerServiceMapperTest {

	private PlayerServiceMapper playerServiceMapper;

	private static ModelMapper modelMapper = new ModelMapper();

	private MockValues mockValues = new MockValues();
	
	
	@BeforeClass
	public static void setUp() {
		modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
	}
	
	@Before
	public void before() {
		playerServiceMapper = new PlayerServiceMapper();
		playerServiceMapper.setModelMapper(modelMapper);
	}
	
	/**
	 * Mapping from 'PlayerEntity' to 'Player'
	 * @param playerEntity
	 */
	@Test
	public void testMapPlayerEntityToPlayer() {
		// Given
		PlayerEntity playerEntity = new PlayerEntity();
		playerEntity.setFirstName(mockValues.nextString(45));
		playerEntity.setLastName(mockValues.nextString(45));
		playerEntity.setDateOfBirth(mockValues.nextDate());
		playerEntity.setCollege(mockValues.nextString(45));
		playerEntity.setDraftPosition(mockValues.nextString(45));
		playerEntity.setYearSelected(mockValues.nextInteger());
		playerEntity.setDateSigned(mockValues.nextDate());
		playerEntity.setPlayerPosition(new PlayerPositionEntity());
		playerEntity.getPlayerPosition().setId(mockValues.nextInteger());
		playerEntity.setTeam(new TeamEntity());
		playerEntity.getTeam().setId(mockValues.nextInteger());
		
		// When
		Player player = playerServiceMapper.mapPlayerEntityToPlayer(playerEntity);
		
		// Then
		assertEquals(playerEntity.getFirstName(), player.getFirstName());
		assertEquals(playerEntity.getLastName(), player.getLastName());
		assertEquals(playerEntity.getDateOfBirth(), player.getDateOfBirth());
		assertEquals(playerEntity.getCollege(), player.getCollege());
		assertEquals(playerEntity.getDraftPosition(), player.getDraftPosition());
		assertEquals(playerEntity.getYearSelected(), player.getYearSelected());
		assertEquals(playerEntity.getDateSigned(), player.getDateSigned());
		assertEquals(playerEntity.getPlayerPosition().getId(), player.getPlayerPositionId());
		assertEquals(playerEntity.getTeam().getId(), player.getTeamId());
	}
	
	/**
	 * Test : Mapping from 'Player' to 'PlayerEntity'
	 */
	@Test
	public void testMapPlayerToPlayerEntity() {
		// Given
		Player player = new Player();
		player.setFirstName(mockValues.nextString(45));
		player.setLastName(mockValues.nextString(45));
		player.setDateOfBirth(mockValues.nextDate());
		player.setCollege(mockValues.nextString(45));
		player.setDraftPosition(mockValues.nextString(45));
		player.setYearSelected(mockValues.nextInteger());
		player.setDateSigned(mockValues.nextDate());
		player.setPlayerPositionId(mockValues.nextInteger());
		player.setTeamId(mockValues.nextInteger());

		PlayerEntity playerEntity = new PlayerEntity();
		
		// When
		playerServiceMapper.mapPlayerToPlayerEntity(player, playerEntity);
		
		// Then
		assertEquals(player.getFirstName(), playerEntity.getFirstName());
		assertEquals(player.getLastName(), playerEntity.getLastName());
		assertEquals(player.getDateOfBirth(), playerEntity.getDateOfBirth());
		assertEquals(player.getCollege(), playerEntity.getCollege());
		assertEquals(player.getDraftPosition(), playerEntity.getDraftPosition());
		assertEquals(player.getYearSelected(), playerEntity.getYearSelected());
		assertEquals(player.getDateSigned(), playerEntity.getDateSigned());
		assertEquals(player.getPlayerPositionId(), playerEntity.getPlayerPosition().getId());
		assertEquals(player.getTeamId(), playerEntity.getTeam().getId());
	}

}