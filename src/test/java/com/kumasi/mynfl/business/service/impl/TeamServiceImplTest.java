/*
 * Created on 5 Jun 2016 ( Time 14:55:37 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.kumasi.mynfl.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import com.kumasi.mynfl.domain.Team;
import com.kumasi.mynfl.domain.jpa.TeamEntity;
import java.util.List;
import com.kumasi.mynfl.business.service.mapping.TeamServiceMapper;
import com.kumasi.mynfl.persistence.services.jpa.TeamPersistenceJPA;
import com.kumasi.mynfl.test.TeamFactoryForTest;
import com.kumasi.mynfl.test.TeamEntityFactoryForTest;
import com.kumasi.mynfl.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of TeamService
 */
@RunWith(MockitoJUnitRunner.class)
public class TeamServiceImplTest {

	@InjectMocks
	private TeamServiceImpl teamService;
	@Mock
	private TeamPersistenceJPA teamPersistenceJPA;
	@Mock
	private TeamServiceMapper teamServiceMapper;
	
	private TeamFactoryForTest teamFactoryForTest = new TeamFactoryForTest();

	private TeamEntityFactoryForTest teamEntityFactoryForTest = new TeamEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer id = mockValues.nextInteger();
		
		TeamEntity teamEntity = teamPersistenceJPA.load(id);
		
		Team team = teamFactoryForTest.newTeam();
		when(teamServiceMapper.mapTeamEntityToTeam(teamEntity)).thenReturn(team);

		// When
		Team teamFound = teamService.findById(id);

		// Then
		assertEquals(team.getId(),teamFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<TeamEntity> teamEntitys = new ArrayList<TeamEntity>();
		TeamEntity teamEntity1 = teamEntityFactoryForTest.newTeamEntity();
		teamEntitys.add(teamEntity1);
		TeamEntity teamEntity2 = teamEntityFactoryForTest.newTeamEntity();
		teamEntitys.add(teamEntity2);
		when(teamPersistenceJPA.loadAll()).thenReturn(teamEntitys);
		
		Team team1 = teamFactoryForTest.newTeam();
		when(teamServiceMapper.mapTeamEntityToTeam(teamEntity1)).thenReturn(team1);
		Team team2 = teamFactoryForTest.newTeam();
		when(teamServiceMapper.mapTeamEntityToTeam(teamEntity2)).thenReturn(team2);

		// When
		List<Team> teamsFounds = teamService.findAll();

		// Then
		assertTrue(team1 == teamsFounds.get(0));
		assertTrue(team2 == teamsFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		Team team = teamFactoryForTest.newTeam();

		TeamEntity teamEntity = teamEntityFactoryForTest.newTeamEntity();
		when(teamPersistenceJPA.load(team.getId())).thenReturn(null);
		
		teamEntity = new TeamEntity();
		teamServiceMapper.mapTeamToTeamEntity(team, teamEntity);
		TeamEntity teamEntitySaved = teamPersistenceJPA.save(teamEntity);
		
		Team teamSaved = teamFactoryForTest.newTeam();
		when(teamServiceMapper.mapTeamEntityToTeam(teamEntitySaved)).thenReturn(teamSaved);

		// When
		Team teamResult = teamService.create(team);

		// Then
		assertTrue(teamResult == teamSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		Team team = teamFactoryForTest.newTeam();

		TeamEntity teamEntity = teamEntityFactoryForTest.newTeamEntity();
		when(teamPersistenceJPA.load(team.getId())).thenReturn(teamEntity);

		// When
		Exception exception = null;
		try {
			teamService.create(team);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		Team team = teamFactoryForTest.newTeam();

		TeamEntity teamEntity = teamEntityFactoryForTest.newTeamEntity();
		when(teamPersistenceJPA.load(team.getId())).thenReturn(teamEntity);
		
		TeamEntity teamEntitySaved = teamEntityFactoryForTest.newTeamEntity();
		when(teamPersistenceJPA.save(teamEntity)).thenReturn(teamEntitySaved);
		
		Team teamSaved = teamFactoryForTest.newTeam();
		when(teamServiceMapper.mapTeamEntityToTeam(teamEntitySaved)).thenReturn(teamSaved);

		// When
		Team teamResult = teamService.update(team);

		// Then
		verify(teamServiceMapper).mapTeamToTeamEntity(team, teamEntity);
		assertTrue(teamResult == teamSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer id = mockValues.nextInteger();

		// When
		teamService.delete(id);

		// Then
		verify(teamPersistenceJPA).delete(id);
		
	}

}
