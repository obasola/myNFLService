/*
 * Created on 5 Jun 2016 ( Time 14:55:36 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.kumasi.mynfl.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import com.kumasi.mynfl.domain.DraftRound;
import com.kumasi.mynfl.domain.jpa.DraftRoundEntity;
import com.kumasi.mynfl.business.service.mapping.DraftRoundServiceMapper;
import com.kumasi.mynfl.persistence.services.jpa.DraftRoundPersistenceJPA;
import com.kumasi.mynfl.test.DraftRoundFactoryForTest;
import com.kumasi.mynfl.test.DraftRoundEntityFactoryForTest;
import com.kumasi.mynfl.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of DraftRoundService
 */
@RunWith(MockitoJUnitRunner.class)
public class DraftRoundServiceImplTest {

	@InjectMocks
	private DraftRoundServiceImpl draftRoundService;
	@Mock
	private DraftRoundPersistenceJPA draftRoundPersistenceJPA;
	@Mock
	private DraftRoundServiceMapper draftRoundServiceMapper;
	
	private DraftRoundFactoryForTest draftRoundFactoryForTest = new DraftRoundFactoryForTest();

	private DraftRoundEntityFactoryForTest draftRoundEntityFactoryForTest = new DraftRoundEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer id = mockValues.nextInteger();
		
		DraftRoundEntity draftRoundEntity = draftRoundPersistenceJPA.load(id);
		
		DraftRound draftRound = draftRoundFactoryForTest.newDraftRound();
		when(draftRoundServiceMapper.mapDraftRoundEntityToDraftRound(draftRoundEntity)).thenReturn(draftRound);

		// When
		DraftRound draftRoundFound = draftRoundService.findById(id);

		// Then
		assertEquals(draftRound.getId(),draftRoundFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<DraftRoundEntity> draftRoundEntitys = new ArrayList<DraftRoundEntity>();
		DraftRoundEntity draftRoundEntity1 = draftRoundEntityFactoryForTest.newDraftRoundEntity();
		draftRoundEntitys.add(draftRoundEntity1);
		DraftRoundEntity draftRoundEntity2 = draftRoundEntityFactoryForTest.newDraftRoundEntity();
		draftRoundEntitys.add(draftRoundEntity2);
		when(draftRoundPersistenceJPA.loadAll()).thenReturn(draftRoundEntitys);
		
		DraftRound draftRound1 = draftRoundFactoryForTest.newDraftRound();
		when(draftRoundServiceMapper.mapDraftRoundEntityToDraftRound(draftRoundEntity1)).thenReturn(draftRound1);
		DraftRound draftRound2 = draftRoundFactoryForTest.newDraftRound();
		when(draftRoundServiceMapper.mapDraftRoundEntityToDraftRound(draftRoundEntity2)).thenReturn(draftRound2);

		// When
		List<DraftRound> draftRoundsFounds = draftRoundService.findAll();

		// Then
		assertTrue(draftRound1 == draftRoundsFounds.get(0));
		assertTrue(draftRound2 == draftRoundsFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		DraftRound draftRound = draftRoundFactoryForTest.newDraftRound();

		DraftRoundEntity draftRoundEntity = draftRoundEntityFactoryForTest.newDraftRoundEntity();
		when(draftRoundPersistenceJPA.load(draftRound.getId())).thenReturn(null);
		
		draftRoundEntity = new DraftRoundEntity();
		draftRoundServiceMapper.mapDraftRoundToDraftRoundEntity(draftRound, draftRoundEntity);
		DraftRoundEntity draftRoundEntitySaved = draftRoundPersistenceJPA.save(draftRoundEntity);
		
		DraftRound draftRoundSaved = draftRoundFactoryForTest.newDraftRound();
		when(draftRoundServiceMapper.mapDraftRoundEntityToDraftRound(draftRoundEntitySaved)).thenReturn(draftRoundSaved);

		// When
		DraftRound draftRoundResult = draftRoundService.create(draftRound);

		// Then
		assertTrue(draftRoundResult == draftRoundSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		DraftRound draftRound = draftRoundFactoryForTest.newDraftRound();

		DraftRoundEntity draftRoundEntity = draftRoundEntityFactoryForTest.newDraftRoundEntity();
		when(draftRoundPersistenceJPA.load(draftRound.getId())).thenReturn(draftRoundEntity);

		// When
		Exception exception = null;
		try {
			draftRoundService.create(draftRound);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		DraftRound draftRound = draftRoundFactoryForTest.newDraftRound();

		DraftRoundEntity draftRoundEntity = draftRoundEntityFactoryForTest.newDraftRoundEntity();
		when(draftRoundPersistenceJPA.load(draftRound.getId())).thenReturn(draftRoundEntity);
		
		DraftRoundEntity draftRoundEntitySaved = draftRoundEntityFactoryForTest.newDraftRoundEntity();
		when(draftRoundPersistenceJPA.save(draftRoundEntity)).thenReturn(draftRoundEntitySaved);
		
		DraftRound draftRoundSaved = draftRoundFactoryForTest.newDraftRound();
		when(draftRoundServiceMapper.mapDraftRoundEntityToDraftRound(draftRoundEntitySaved)).thenReturn(draftRoundSaved);

		// When
		DraftRound draftRoundResult = draftRoundService.update(draftRound);

		// Then
		verify(draftRoundServiceMapper).mapDraftRoundToDraftRoundEntity(draftRound, draftRoundEntity);
		assertTrue(draftRoundResult == draftRoundSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer id = mockValues.nextInteger();

		// When
		draftRoundService.delete(id);

		// Then
		verify(draftRoundPersistenceJPA).delete(id);
		
	}

}
