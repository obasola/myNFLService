/*
 * Created on 5 Jun 2016 ( Time 14:55:36 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.kumasi.mynfl.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import com.kumasi.mynfl.domain.PlayerStat;
import com.kumasi.mynfl.domain.jpa.PlayerStatEntity;
import java.util.Date;
import com.kumasi.mynfl.business.service.mapping.PlayerStatServiceMapper;
import com.kumasi.mynfl.persistence.services.jpa.PlayerStatPersistenceJPA;
import com.kumasi.mynfl.test.PlayerStatFactoryForTest;
import com.kumasi.mynfl.test.PlayerStatEntityFactoryForTest;
import com.kumasi.mynfl.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of PlayerStatService
 */
@RunWith(MockitoJUnitRunner.class)
public class PlayerStatServiceImplTest {

	@InjectMocks
	private PlayerStatServiceImpl playerStatService;
	@Mock
	private PlayerStatPersistenceJPA playerStatPersistenceJPA;
	@Mock
	private PlayerStatServiceMapper playerStatServiceMapper;
	
	private PlayerStatFactoryForTest playerStatFactoryForTest = new PlayerStatFactoryForTest();

	private PlayerStatEntityFactoryForTest playerStatEntityFactoryForTest = new PlayerStatEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer id = mockValues.nextInteger();
		
		PlayerStatEntity playerStatEntity = playerStatPersistenceJPA.load(id);
		
		PlayerStat playerStat = playerStatFactoryForTest.newPlayerStat();
		when(playerStatServiceMapper.mapPlayerStatEntityToPlayerStat(playerStatEntity)).thenReturn(playerStat);

		// When
		PlayerStat playerStatFound = playerStatService.findById(id);

		// Then
		assertEquals(playerStat.getId(),playerStatFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<PlayerStatEntity> playerStatEntitys = new ArrayList<PlayerStatEntity>();
		PlayerStatEntity playerStatEntity1 = playerStatEntityFactoryForTest.newPlayerStatEntity();
		playerStatEntitys.add(playerStatEntity1);
		PlayerStatEntity playerStatEntity2 = playerStatEntityFactoryForTest.newPlayerStatEntity();
		playerStatEntitys.add(playerStatEntity2);
		when(playerStatPersistenceJPA.loadAll()).thenReturn(playerStatEntitys);
		
		PlayerStat playerStat1 = playerStatFactoryForTest.newPlayerStat();
		when(playerStatServiceMapper.mapPlayerStatEntityToPlayerStat(playerStatEntity1)).thenReturn(playerStat1);
		PlayerStat playerStat2 = playerStatFactoryForTest.newPlayerStat();
		when(playerStatServiceMapper.mapPlayerStatEntityToPlayerStat(playerStatEntity2)).thenReturn(playerStat2);

		// When
		List<PlayerStat> playerStatsFounds = playerStatService.findAll();

		// Then
		assertTrue(playerStat1 == playerStatsFounds.get(0));
		assertTrue(playerStat2 == playerStatsFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		PlayerStat playerStat = playerStatFactoryForTest.newPlayerStat();

		PlayerStatEntity playerStatEntity = playerStatEntityFactoryForTest.newPlayerStatEntity();
		when(playerStatPersistenceJPA.load(playerStat.getId())).thenReturn(null);
		
		playerStatEntity = new PlayerStatEntity();
		playerStatServiceMapper.mapPlayerStatToPlayerStatEntity(playerStat, playerStatEntity);
		PlayerStatEntity playerStatEntitySaved = playerStatPersistenceJPA.save(playerStatEntity);
		
		PlayerStat playerStatSaved = playerStatFactoryForTest.newPlayerStat();
		when(playerStatServiceMapper.mapPlayerStatEntityToPlayerStat(playerStatEntitySaved)).thenReturn(playerStatSaved);

		// When
		PlayerStat playerStatResult = playerStatService.create(playerStat);

		// Then
		assertTrue(playerStatResult == playerStatSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		PlayerStat playerStat = playerStatFactoryForTest.newPlayerStat();

		PlayerStatEntity playerStatEntity = playerStatEntityFactoryForTest.newPlayerStatEntity();
		when(playerStatPersistenceJPA.load(playerStat.getId())).thenReturn(playerStatEntity);

		// When
		Exception exception = null;
		try {
			playerStatService.create(playerStat);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		PlayerStat playerStat = playerStatFactoryForTest.newPlayerStat();

		PlayerStatEntity playerStatEntity = playerStatEntityFactoryForTest.newPlayerStatEntity();
		when(playerStatPersistenceJPA.load(playerStat.getId())).thenReturn(playerStatEntity);
		
		PlayerStatEntity playerStatEntitySaved = playerStatEntityFactoryForTest.newPlayerStatEntity();
		when(playerStatPersistenceJPA.save(playerStatEntity)).thenReturn(playerStatEntitySaved);
		
		PlayerStat playerStatSaved = playerStatFactoryForTest.newPlayerStat();
		when(playerStatServiceMapper.mapPlayerStatEntityToPlayerStat(playerStatEntitySaved)).thenReturn(playerStatSaved);

		// When
		PlayerStat playerStatResult = playerStatService.update(playerStat);

		// Then
		verify(playerStatServiceMapper).mapPlayerStatToPlayerStatEntity(playerStat, playerStatEntity);
		assertTrue(playerStatResult == playerStatSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer id = mockValues.nextInteger();

		// When
		playerStatService.delete(id);

		// Then
		verify(playerStatPersistenceJPA).delete(id);
		
	}

}
