/*
 * Created on 5 Jun 2016 ( Time 14:55:36 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.kumasi.mynfl.business.service.mapping;

import static org.junit.Assert.assertEquals;

import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.stereotype.Component;
import com.kumasi.mynfl.domain.PlayerStat;
import com.kumasi.mynfl.domain.jpa.PlayerStatEntity;
import com.kumasi.mynfl.domain.jpa.PlayerEntity;
import com.kumasi.mynfl.test.MockValues;

/**
 * Test : Mapping between entity beans and display beans.
 */
public class PlayerStatServiceMapperTest {

	private PlayerStatServiceMapper playerStatServiceMapper;

	private static ModelMapper modelMapper = new ModelMapper();

	private MockValues mockValues = new MockValues();
	
	
	@BeforeClass
	public static void setUp() {
		modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
	}
	
	@Before
	public void before() {
		playerStatServiceMapper = new PlayerStatServiceMapper();
		playerStatServiceMapper.setModelMapper(modelMapper);
	}
	
	/**
	 * Mapping from 'PlayerStatEntity' to 'PlayerStat'
	 * @param playerStatEntity
	 */
	@Test
	public void testMapPlayerStatEntityToPlayerStat() {
		// Given
		PlayerStatEntity playerStatEntity = new PlayerStatEntity();
		playerStatEntity.setPlayerType(mockValues.nextString(2));
		playerStatEntity.setRushingAttempts(mockValues.nextInteger());
		playerStatEntity.setPassingAttempts(mockValues.nextInteger());
		playerStatEntity.setPassingCompletions(mockValues.nextFloat());
		playerStatEntity.setYardsPerCarry(mockValues.nextFloat());
		playerStatEntity.setYardsPerPass(mockValues.nextFloat());
		playerStatEntity.setYardsPerCatch(mockValues.nextFloat());
		playerStatEntity.setTouchdowns(mockValues.nextInteger());
		playerStatEntity.setNbrInterceptions(mockValues.nextInteger());
		playerStatEntity.setNbrTackles(mockValues.nextFloat());
		playerStatEntity.setNbrSacks(mockValues.nextFloat());
		playerStatEntity.setNbrAssists(mockValues.nextFloat());
		playerStatEntity.setOpponent(mockValues.nextString(45));
		playerStatEntity.setGameDate(mockValues.nextDate());
		playerStatEntity.setPlayer(new PlayerEntity());
		playerStatEntity.getPlayer().setId(mockValues.nextInteger());
		
		// When
		PlayerStat playerStat = playerStatServiceMapper.mapPlayerStatEntityToPlayerStat(playerStatEntity);
		
		// Then
		assertEquals(playerStatEntity.getPlayerType(), playerStat.getPlayerType());
		assertEquals(playerStatEntity.getRushingAttempts(), playerStat.getRushingAttempts());
		assertEquals(playerStatEntity.getPassingAttempts(), playerStat.getPassingAttempts());
		assertEquals(playerStatEntity.getPassingCompletions(), playerStat.getPassingCompletions());
		assertEquals(playerStatEntity.getYardsPerCarry(), playerStat.getYardsPerCarry());
		assertEquals(playerStatEntity.getYardsPerPass(), playerStat.getYardsPerPass());
		assertEquals(playerStatEntity.getYardsPerCatch(), playerStat.getYardsPerCatch());
		assertEquals(playerStatEntity.getTouchdowns(), playerStat.getTouchdowns());
		assertEquals(playerStatEntity.getNbrInterceptions(), playerStat.getNbrInterceptions());
		assertEquals(playerStatEntity.getNbrTackles(), playerStat.getNbrTackles());
		assertEquals(playerStatEntity.getNbrSacks(), playerStat.getNbrSacks());
		assertEquals(playerStatEntity.getNbrAssists(), playerStat.getNbrAssists());
		assertEquals(playerStatEntity.getOpponent(), playerStat.getOpponent());
		assertEquals(playerStatEntity.getGameDate(), playerStat.getGameDate());
		assertEquals(playerStatEntity.getPlayer().getId(), playerStat.getPlayerId());
	}
	
	/**
	 * Test : Mapping from 'PlayerStat' to 'PlayerStatEntity'
	 */
	@Test
	public void testMapPlayerStatToPlayerStatEntity() {
		// Given
		PlayerStat playerStat = new PlayerStat();
		playerStat.setPlayerType(mockValues.nextString(2));
		playerStat.setRushingAttempts(mockValues.nextInteger());
		playerStat.setPassingAttempts(mockValues.nextInteger());
		playerStat.setPassingCompletions(mockValues.nextFloat());
		playerStat.setYardsPerCarry(mockValues.nextFloat());
		playerStat.setYardsPerPass(mockValues.nextFloat());
		playerStat.setYardsPerCatch(mockValues.nextFloat());
		playerStat.setTouchdowns(mockValues.nextInteger());
		playerStat.setNbrInterceptions(mockValues.nextInteger());
		playerStat.setNbrTackles(mockValues.nextFloat());
		playerStat.setNbrSacks(mockValues.nextFloat());
		playerStat.setNbrAssists(mockValues.nextFloat());
		playerStat.setOpponent(mockValues.nextString(45));
		playerStat.setGameDate(mockValues.nextDate());
		playerStat.setPlayerId(mockValues.nextInteger());

		PlayerStatEntity playerStatEntity = new PlayerStatEntity();
		
		// When
		playerStatServiceMapper.mapPlayerStatToPlayerStatEntity(playerStat, playerStatEntity);
		
		// Then
		assertEquals(playerStat.getPlayerType(), playerStatEntity.getPlayerType());
		assertEquals(playerStat.getRushingAttempts(), playerStatEntity.getRushingAttempts());
		assertEquals(playerStat.getPassingAttempts(), playerStatEntity.getPassingAttempts());
		assertEquals(playerStat.getPassingCompletions(), playerStatEntity.getPassingCompletions());
		assertEquals(playerStat.getYardsPerCarry(), playerStatEntity.getYardsPerCarry());
		assertEquals(playerStat.getYardsPerPass(), playerStatEntity.getYardsPerPass());
		assertEquals(playerStat.getYardsPerCatch(), playerStatEntity.getYardsPerCatch());
		assertEquals(playerStat.getTouchdowns(), playerStatEntity.getTouchdowns());
		assertEquals(playerStat.getNbrInterceptions(), playerStatEntity.getNbrInterceptions());
		assertEquals(playerStat.getNbrTackles(), playerStatEntity.getNbrTackles());
		assertEquals(playerStat.getNbrSacks(), playerStatEntity.getNbrSacks());
		assertEquals(playerStat.getNbrAssists(), playerStatEntity.getNbrAssists());
		assertEquals(playerStat.getOpponent(), playerStatEntity.getOpponent());
		assertEquals(playerStat.getGameDate(), playerStatEntity.getGameDate());
		assertEquals(playerStat.getPlayerId(), playerStatEntity.getPlayer().getId());
	}

}